
@article{abou-salehCoalgebraicAspectsBidirectional2017,
  title = {Coalgebraic {{Aspects}} of {{Bidirectional Computation}}.},
  author = {{Abou-Saleh}, Faris and McKinna, James and Gibbons, Jeremy},
  year = {2017},
  volume = {16},
  pages = {1:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2017.16.1.a1},
  abstract = {We have previously shown that several state-based bx formalisms can be captured using monadic functional programming, using the state monad together with possibly other monadic effects, giving rise to structures we have called monadic bx (mbx). In this paper, we develop a coalgebraic theory of state-based bx, and relate the resulting coalgebraic structures (cbx) to mbx. We show that cbx support a notion of composition coherent with, but conceptually simpler than, our previous mbx definition. Coalgebraic bisimulation yields a natural notion of behavioural equivalence on cbx, which respects composition, and essentially includes symmetric lens equivalence as a special case. Finally, we speculate on the applications of this coalgebraic perspective to other bx constructions and formalisms.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MNUPHD2Y\\Abou-Saleh et al. - 2017 - Coalgebraic Aspects of Bidirectional Computation..pdf;C\:\\Users\\Tim\\Zotero\\storage\\V5H44JTT\\cbx-jot-long.pdf},
  journal = {The Journal of Object Technology},
  language = {en},
  number = {1}
}

@book{acetoReactiveSystemsModelling2007,
  title = {Reactive {{Systems}}: {{Modelling}}, {{Specification}} and {{Verification}}},
  shorttitle = {Reactive {{Systems}}},
  author = {Aceto, Luca and Ingolfsdottir, Anna and Larsen, Kim Guldstrand and Srba, Jiri},
  year = {2007},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/CBO9780511814105},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Y42ZYSV2\\Aceto et al. - 2007 - Reactive Systems Modelling, Specification and Ver.pdf},
  isbn = {978-0-511-81410-5}
}

@article{allakiBuildingConsistentUML2017,
  title = {Building {{Consistent UML Models}} for {{Better Model Driven Engineering}}},
  author = {Allaki, Driss},
  year = {2017},
  volume = {15},
  pages = {12},
  abstract = {The OMG (Object Management Group) has designed its own vision of the emerging software paradigm MDE (Model Driven Engineering) under the name of MDA (Model Driven Architecture). For this aim, OMG proposes a set of standardized rules and practices to promote good modeling and perfectly exploit models. To fully benefit from this approach, the UML models, to be used within MDA, should be consistent. In this paper, we point out that inconsistencies could be a serious problem that negatively affects the sustainability, the productivity and the consideration of execution platforms aimed by MDA. As a solution, we propose a constraint-based method that defines consistency rules expressed using EVL (Epsilon Validation Language) to automatically detect and fix the potential inconsistencies that could compromise the application of MDA through UML diagrams.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BDCSSBBA\\Allaki - 2017 - Building Consistent UML Models for Better Model Dr.pdf},
  language = {en},
  number = {5}
}

@article{allakiNEWTAXONOMYINCONSISTENCIES,
  title = {A {{NEW TAXONOMY OF INCONSISTENCIES IN UML MODELS WITH THEIR DETECTION METHODS FOR BETTER MDE}}},
  author = {Allaki, Driss and Dahchour, Mohamed and {En-Nouaary}, Abdeslam},
  pages = {18},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4AG58E7D\\Allaki et al. - A NEW TAXONOMY OF INCONSISTENCIES IN UML MODELS WI.pdf},
  language = {en}
}

@article{amraniMultiparadigmModellingCyber2021,
  title = {Multi-Paradigm Modelling for Cyber\textendash Physical Systems: A Descriptive Framework},
  shorttitle = {Multi-Paradigm Modelling for Cyber\textendash Physical Systems},
  author = {Amrani, Moussa and Blouin, Dominique and Heinrich, Robert and Rensink, Arend and Vangheluwe, Hans and Wortmann, Andreas},
  year = {2021},
  month = jun,
  volume = {20},
  pages = {611--639},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-021-00876-z},
  abstract = {The complexity of cyber\textendash physical systems (CPSs) is commonly addressed through complex workflows, involving models in a plethora of different formalisms, each with their own methods, techniques, and tools. Some workflow patterns, combined with particular types of formalisms and operations on models in these formalisms, are used successfully in engineering practice. To identify and reuse them, we refer to these combinations of workflow and formalism patterns as modelling paradigms. This paper proposes a unifying (Descriptive) Framework to describe these paradigms, as well as their combinations. This work is set in the context of Multi-Paradigm Modelling (MPM), which is based on the principle to model every part and aspect of a system explicitly, at the most appropriate level(s) of abstraction, using the most appropriate modelling formalism(s) and workflows. The purpose of the Descriptive Framework presented in this paper is to serve as a basis to reason about these formalisms, workflows, and their combinations. One crucial part of the framework is the ability to capture the structural essence of a paradigm through the concept of a paradigmatic structure. This is illustrated informally by means of two example paradigms commonly used in CPS: Discrete Event Dynamic Systems and Synchronous Data Flow. The presented framework also identifies the need to establish whether a paradigm candidate follows, or qualifies as, a (given) paradigm. To illustrate the ability of the framework to support combining paradigms, the paper shows examples of both workflow and formalism combinations. The presented framework is intended as a basis for characterisation and classification of paradigms, as a starting point for a rigorous formalisation of the framework (allowing formal analyses), and as a foundation for MPM tool development.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ELTN8BQF\\Amrani et al. - 2021 - Multi-paradigm modelling for cyber–physical system.pdf},
  journal = {Software and Systems Modeling},
  language = {en},
  number = {3}
}

@article{anjorinBenchmarkingBidirectionalTransformations2020,
  title = {Benchmarking Bidirectional Transformations: Theory, Implementation, Application, and Assessment},
  shorttitle = {Benchmarking Bidirectional Transformations},
  author = {Anjorin, Anthony and Buchmann, Thomas and Westfechtel, Bernhard and Diskin, Zinovy and Ko, Hsiang-Shang and Eramo, Romina and Hinkel, Georg and {Samimi-Dehkordi}, Leila and Z{\"u}ndorf, Albert},
  year = {2020},
  month = may,
  volume = {19},
  pages = {647--691},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-019-00752-x},
  abstract = {Bidirectional transformations (bx) are relevant for a wide range of application domains. While bx problems may be solved with unidirectional languages and tools, maintaining separate implementations of forward and backward synchronizers with mutually consistent behavior can be difficult, laborious, and error-prone. To address the challenges involved in handling bx problems, dedicated languages and tools for bx have been developed. Due to their heterogeneity, however, the numerous and diverse approaches to bx are difficult to compare, with the consequence that fundamental differences and similarities are not yet well understood. This motivates the need for suitable benchmarks that facilitate the comparison of bx approaches. This paper provides a comprehensive treatment of benchmarking bx, covering theory, implementation, application, and assessment. At the level of theory, we introduce a conceptual framework that defines and classifies architectures of bx tools. At the level of implementation, we describe Benchmarx, an infrastructure for benchmarking bx tools which is based on the conceptual framework. At the level of application, we report on a wide variety of solutions to the well-known Families-to-Persons benchmark, which were developed and compared with the help of Benchmarx. At the level of assessment, we reflect on the usefulness of the Benchmarx approach to benchmarking bx, based on the experiences gained from the Families-to-Persons benchmark.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DUDGK6ER\\Anjorin et al. - 2020 - Benchmarking bidirectional transformations theory.pdf},
  journal = {Software and Systems Modeling},
  language = {en},
  number = {3}
}

@article{awadidConsistencyRequirementsBusiness2019,
  title = {Consistency Requirements in Business Process Modeling: A Thorough Overview},
  shorttitle = {Consistency Requirements in Business Process Modeling},
  author = {Awadid, Afef and Nurcan, Selmin},
  year = {2019},
  month = apr,
  volume = {18},
  pages = {1097--1115},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-017-0629-2},
  abstract = {The field of business process modeling has been beset by inter-model consistency problems which are mainly due to the existence of multiple variants of the same business process, for instance when models have been produced by different actors, or through the time by a same (or different) actor(s), as well as the possibility of its modeling from discrete and complementary perspectives (using different lenses). Accordingly, our overall aim in this paper is to provide a thorough overview of consistency requirements in business process modeling, which is strongly needed not only for the sake of a comprehensive investigation of this challenging subject, but also for the sake of empowering significant contributions to it. In order to do so, we opted for a systematic literature review of consistency among business process models as starting point and basis to attain the intended overview and to guide our contributions in this field.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7DNTRHKB\\Awadid og Nurcan - 2019 - Consistency requirements in business process model.pdf},
  journal = {Software \& Systems Modeling},
  language = {en},
  number = {2}
}

@incollection{azziVerigraphSystemGraph2018,
  title = {The Verigraph System for Graph Transformation},
  booktitle = {Graph Transformation, Specifications, and Nets: {{In}} Memory of Hartmut Ehrig},
  author = {Azzi, Guilherme Grochau and Bezerra, Jonas Santos and Ribeiro, Leila and Costa, Andrei and Rodrigues, Leonardo Marques and Machado, Rodrigo},
  editor = {Heckel, Reiko and Taentzer, Gabriele},
  year = {2018},
  pages = {160--178},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-75396-6₉},
  abstract = {Graph transformation (GT) is a rule-based framework, suitable for modelling both static and dynamic aspects of complex systems in an intuitive yet formal manner. The algebraic approach to GT is based on category theory, allowing the instantiation of theoretical results to multiple graph-like structures (e.g. labelled or attributed graphs, Petri nets, even transformation rules themselves). There exists a rich theory of algebraic GT which underlies verification techniques such as static analysis. Current tools based on GT are implemented in a very concrete way, unlike the theory, making them hard to extend with novel theoretical results. Thus a new software system called Verigraph was created, with the goal of implementing the theory as closely as possible, while maintaining a reasonable execution time. In this paper we present the architecture of Verigraph, which enabled an almost direct implementation of the theory. We also provide a step-by-step guide to implementing a new graph model within the system, using second-order graph transformation as an example. Finally, we compare the performance of Verigraph and AGG.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WJAUPUIM\\Azzi et al. - 2018 - The verigraph system for graph transformation.pdf},
  isbn = {978-3-319-75396-6}
}

@article{babaeiEfficientReorderingReplay2020,
  title = {Efficient {{Reordering}} and {{Replay}} of {{Execution Traces}} of {{Distributed Reactive Systems}} in the {{Context}} of {{Model}}-Driven {{Development}}},
  author = {Babaei, Majid and Bagherzadeh, Mojtaba and Dingel, Juergen},
  year = {2020},
  pages = {12},
  abstract = {Ordering and replaying of execution traces of distributed systems is a challenging problem. State-of-the-art approaches annotate the traces with logical or physical timestamps. However, both kinds of timestamps have their drawbacks, including increased trace size. We examine the problem of determining consistent orderings of execution traces in the context of model-driven development of reactive distributed systems, that is, systems whose code has been generated from communicating state machine models. By leveraging key concepts of state machines and existing model analysis and transformation techniques, we propose an approach to collecting and reordering execution traces that does not rely on timestamps. We describe a prototype implementation of our approach and an evaluation. The experimental results show that compared to reordering based on logical timestamps using vector time (clocks), our approach reduces the size of the trace information collected by more than half while incurring similar runtime overhead.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\H5FQ9CGF\\Babaei et al. - 2020 - Efficient Reordering and Replay of Execution Trace.pdf},
  language = {en}
}

@inproceedings{bar-sinaiBPjsExtensibleOpen2018,
  title = {{{BPjs}}: An Extensible, Open Infrastructure for Behavioral Programming Research},
  shorttitle = {{{BPjs}}},
  booktitle = {Proceedings of the 21st {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}: {{Companion Proceedings}}},
  author = {{Bar-Sinai}, Michael and Weiss, Gera and Shmuel, Reut},
  year = {2018},
  month = oct,
  pages = {59--60},
  publisher = {{ACM}},
  address = {{Copenhagen Denmark}},
  doi = {10.1145/3270112.3270126},
  abstract = {We present unified and extensible semantics for Behavioral Programming (BP). The presented semantics support a direct embedding of executable models in regular software systems. We further present BPjs \textemdash{} a tool-set for executing, embedding, and verifying behavioral models, based on the proposed semantics. Being extensible, embeddable, and supporting verification, BPjs can serve as a common infrastructure for BP and executable modeling research.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PBQ2RP8Z\\Bar-Sinai et al. - 2018 - BPjs an extensible, open infrastructure for behav.pdf},
  isbn = {978-1-4503-5965-8},
  language = {en}
}

@article{bar-sinaiBPjsFrameworkModeling2018,
  title = {{{BPjs}} --- a Framework for Modeling Reactive Systems Using a Scripting Language and {{BP}}},
  author = {{Bar-Sinai}, Michael and Weiss, Gera and Shmuel, Reut},
  year = {2018},
  month = jun,
  abstract = {We describe some progress towards a new common framework for model driven engineering, based on behavioral programming. The tool we have developed unifies almost all of the work done in behavioral programming so far, under a common set of interfaces. Its architecture supports pluggable event selection strategies, which can make models more intuitive and compact. Program state space can be traversed using various algorithms, such as DFS and A*. Furthermore, program state is represented in a way that enables scanning a state space using parallel and distributed algorithms. Executable models created with this tool can be directly embedded in Java applications, enabling a model-first approach to system engineering, where initially a model is created and verified, and then a working application is gradually built around the model. The model itself consists of a collection of small scripts written in JavaScript (hence ``BPjs''). Using a variety of case-studies, this paper shows how the combination of a lenient programming language with formal model analysis tools creates an efficient way of developing robust complex systems. Additionally, as we learned from an experimental course we ran, the usage of JavaScript make practitioners more amenable to using this system and, thus, model checking and model driven engineering. In addition to providing infrastructure for development and case-studies in behavioral programming, the tool is designed to serve as a common platform for research and innovation in behavioral programming and in model driven engineering in general.},
  archiveprefix = {arXiv},
  eprint = {1806.00842},
  eprinttype = {arxiv},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JTCUX8NJ\\Bar-Sinai et al. - 2018 - BPjs --- a framework for modeling reactive systems.pdf},
  journal = {arXiv:1806.00842 [cs]},
  keywords = {Computer Science - Formal Languages and Automata Theory,Computer Science - Programming Languages,Computer Science - Software Engineering},
  language = {en},
  primaryclass = {cs}
}

@inproceedings{barbosaUMLModelRefactoring2008,
  title = {{{UML Model Refactoring}} as {{Refinement}}: {{A Coalgebraic Perspective}}},
  shorttitle = {{{UML Model Refactoring}} as {{Refinement}}},
  booktitle = {2008 10th {{International Symposium}} on {{Symbolic}} and {{Numeric Algorithms}} for {{Scientific Computing}}},
  author = {Barbosa, Luis Soares and Meng, Sun},
  year = {2008},
  pages = {340--347},
  publisher = {{IEEE}},
  address = {{Timisoara, Romania}},
  doi = {10.1109/SYNASC.2008.88},
  abstract = {Although increasingly popular, Model Driven Architecture (MDA) still lacks suitable formal foundations on top of which rigorous methodologies for the description, analysis and transformation of models could be built. This paper aims to contribute in this direction: building on previous work by the authors on coalgebraic refinement for software components and architectures, it discusses refactoring of models within a coalgebraic semantic framework. Architectures are defined through aggregation based on a coalgebraic semantics for (subsets of) UML. On the other hand, such aggregations, no matter how large and complex they are, can always be dealt with as coalgebras themselves. This paves the way to a discipline of models' transformations which, being invariant under either behavioural equivalence or refinement, are able to formally capture a large number of refactoring patterns. The main ideas underlying this research are presented through a detailed example in the context of refactoring of UML class diagrams.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XPLQ638U\\Barbosa und Meng - 2008 - UML Model Refactoring as Refinement A Coalgebraic.pdf},
  isbn = {978-0-7695-3523-4},
  language = {en}
}

@article{baresiEfficientSolutionModel2008,
  title = {An {{Efficient Solution}} for {{Model Checking Graph Transformation Systems}}},
  author = {Baresi, Luciano and Rafe, Vahid and Rahmani, Adel T. and Spoletini, Paola},
  year = {2008},
  month = may,
  volume = {213},
  pages = {3--21},
  issn = {15710661},
  doi = {10.1016/j.entcs.2008.04.071},
  abstract = {This paper presents an efficient solution for modeling checking graph transformation systems. The approach transforms AGG specifications into Bogor models and supports both attributed typed graphs and layered transformations. Resulting models are amenable to check interesting properties expressed as combinations of LTL (Linear Temporal Logic) and graph transformation rules. The first experimental results are encouraging and show that in most cases our proposal improves existing approaches, both in terms of performance and expressiveness.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DWF58FNS\\Baresi et al. - 2008 - An Efficient Solution for Model Checking Graph Tra.pdf},
  journal = {Electronic Notes in Theoretical Computer Science},
  language = {en},
  number = {1}
}

@article{bashirUMLModelsConsistency2016,
  title = {{{UML}} Models Consistency Management: {{Guidelines}} for Software Quality Manager},
  author = {Bashir, Raja Sehrab},
  year = {2016},
  pages = {17},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RIEVDFFE\\Bashir - 2016 - UML models consistency management Guidelines for .pdf},
  journal = {International Journal of Information Management},
  language = {en}
}

@article{beckerVeriGraphToolModel,
  title = {{{VeriGraph}}: {{A Tool For Model Checking Graph Grammars}}},
  author = {Becker, Thiago Rafael},
  pages = {95},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FFYV4QVL\\Becker - VeriGraph A Tool For Model Checking Graph Grammar.pdf},
  language = {en}
}

@phdthesis{bednarczykCategoriesAsynchronousSystems1987,
  title = {Categories of Asynchronous Systems},
  author = {Bednarczyk, Marek A.},
  year = {1987},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\YT2NJWQA\\Bednarczyk - Categories of Asynchronous Systems.pdf}
}

@article{bednarczykExpressingVerifyingTemporal2015,
  title = {Expressing and {{Verifying Temporal}} and {{Structural Properties}} of {{Mobile Agents}}},
  author = {Bednarczyk, Marek A and Jamroga, Wojciech and Paw{\l}owski, Wies{\l}aw},
  year = {2015},
  pages = {24},
  abstract = {The paper deals with logics for expressing temporal and structural properties of Petri hypernets, a visual formalism for modeling mobile agents. In particular, we consider how such logics can be build as a composition of two formalisms\textemdash one for expressing the temporal, another for expressing the structural properties of multiagent systems. The problem of model checking properties of a class of composed logics on Petri hypernets is shown to be PSPACE-complete.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7WZD4VG6\\Bednarczyk et al. - Expressing and Verifying Temporal and Structural P.pdf},
  language = {en}
}

@article{bednarczykFiniteCompletenessCategories2000,
  title = {Finite {{Completeness}} of {{Categories}} of {{Petri Nets}}},
  author = {Bednarczyk, Marek A. and Borzyszkowski, Andrzej M. and Somla, Rafa{\l}},
  year = {2000},
  volume = {43},
  pages = {21--48},
  issn = {01692968},
  doi = {10.3233/FI-2000-43123402},
  abstract = {The problem of finite completeness of categories of Petri nets is studied. Since Petri nets have finite products, the problem reduces to the issue of the existence of equalizers. We show that the categories of Petri nets with general and Winskel morphisms do not admit equalizers, and hence are not finitely complete.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\YYB58JUN\\Bednarczyk et al. - 2000 - Finite Completeness of Categories of Petri Nets.pdf},
  journal = {Fundamenta Informaticae},
  language = {en},
  number = {1-4}
}

@article{bednarczykModellingAnalysingSystems2008,
  title = {Modelling and {{Analysing Systems}} of {{Agents}} by {{Agent}}-Aware {{Transition Systems}}},
  author = {Bednarczyk, Marek and Bernardinello, Luca and Paw{\l}owski, Wies{\l}aw and Pomello, Lucia},
  year = {2008},
  pages = {11},
  abstract = {We propose a method to specify, in a modular way, complex systems formed by interacting agents. The method is based on the notion of view, that is a partial representation of the system, reflecting one of its specific aspects. By composing the different views, we get the overall system, described as a special kind of transition system. By means of a suitable logical language, we can express interesting properties of the system; model-checking techniques can then be used to assess their validity. Views can be specified using different languages or notations, provided they can be translated in so-called agent aware transition systems. The method is explained with the help of a simple, but non trivial example.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Y757UGLT\\Bednarczyk et al. - Modelling and Analysing Systems of Agents by Agent.pdf},
  language = {en}
}

@incollection{bednarczykModellingMobilityPetri2005,
  title = {Modelling {{Mobility}} with {{Petri Hypernets}}},
  booktitle = {Recent {{Trends}} in {{Algebraic Development Techniques}}},
  author = {Bednarczyk, Marek A. and Bernardinello, Luca and Paw{\l}owski, Wies{\l}aw and Pomello, Lucia},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Fiadeiro, Jos{\'e} Luiz and Mosses, Peter D. and Orejas, Fernando},
  year = {2005},
  volume = {3423},
  pages = {28--44},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-31959-7_2},
  abstract = {Petri hypernets, a novel framework for modeling mobile agents based on nets-within-nets paradigm is presented. Hypernets employ a local and finitary character of interactions between agents, and provide means for a modular and hierarchical description. They are capable of modelling mobile agents tfrahat can dynamically change their hierarchy, and can communicate with each other and with the outside world by exchanging messages, i.e., other mobile agents.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\S66RQZNC\\Bednarczyk et al. - 2005 - Modelling Mobility with Petri Hypernets.pdf},
  isbn = {978-3-540-25327-3 978-3-540-31959-7},
  language = {en}
}

@incollection{bednarczykModularSystemDevelopment2003,
  title = {Modular {{System Development}} with {{Pullbacks}}},
  booktitle = {Applications and {{Theory}} of {{Petri Nets}} 2003},
  author = {Bednarczyk, Marek A. and Bernardinello, Luca and Caillaud, Beno{\^i}t and Paw{\l}owski, Wies{\l}aw and Pomello, Lucia},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and {van der Aalst}, Wil M. P. and Best, Eike},
  year = {2003},
  volume = {2679},
  pages = {140--160},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-44919-1_12},
  abstract = {Two, seemingly different modular techniques for concurrent system development are investigated from a categorical perspective. A novel approach is presented in which they turn out to be merely special instances of pullback, a general categorical limit construction. Interestingly, the approach is based on truly concurrent semantics of systems.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4BI2PNMD\\Bednarczyk et al. - 2003 - Modular System Development with Pullbacks.pdf},
  isbn = {978-3-540-40334-0 978-3-540-44919-5},
  language = {en}
}

@article{bednarczykMultifacetApproachDynamic2008,
  title = {A Multi-Facet Approach to Dynamic Agent Systems},
  author = {Bednarczyk, Marek A and Paw{\l}owski, Wies{\l}aw and Bernardinello, Luca and Pomello, Lucia and Borzyszkowski, Tomasz},
  year = {2008},
  pages = {15},
  abstract = {We are concerned with the problem of defining a complex, hybrid, agent based discrete system in a modular way. The modularity results from looking at the system from a number of different perspectives, each dealing with a specific aspect of the system. As a solution a synchronization operator is proposed which glues agent aware systems on shared agents and transitions. The construction turns out to be a categorical product. We also show that a logic to talk about the temporal and the structural properties of the product can be obtained by gluing suitable logical frameworks from the components.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CP5RLJMW\\Bednarczyk et al. - A multi-facet approach to dynamic agent systems.pdf},
  language = {en}
}

@article{bencomoModelsRunTime2019,
  title = {Models@run.Time: A Guided Tour of the State of the Art and Research Challenges},
  shorttitle = {Models@run.Time},
  author = {Bencomo, Nelly and G{\"o}tz, Sebastian and Song, Hui},
  year = {2019},
  month = oct,
  volume = {18},
  pages = {3049--3082},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-018-00712-x},
  abstract = {More than a decade ago, the research topic models@run.time was coined. Since then, the research area has received increasing attention. Given the prolific results during these years, the current outcomes need to be sorted and classified. Furthermore, many gaps need to be categorised in order to further develop the research topic by experts of the research area but also newcomers. Accordingly, the paper discusses the principles and requirements of models@run.time and the state-of-the-art of the research line. To make the discussion more concrete, a taxonomy is defined and used to compare the main approaches and research outcomes in the area during the last decade and including ancestor research initiatives. We identified and classified 275 papers on models@run.time, which allowed us to identify the underlying research gaps and to elaborate on the corresponding research challenges. Finally, we also facilitate sustainability of the survey over time by offering tool support to add, correct and visualise data.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\U6GEYGAH\\Bencomo et al. - 2019 - Models@run.time a guided tour of the state of the.pdf},
  journal = {Software \& Systems Modeling},
  language = {en},
  number = {5}
}

@article{benelallamRaisingTimeAwareness,
  title = {Raising {{Time Awareness}} in {{Model}}-{{Driven Engineering}}},
  author = {Benelallam, Amine and Hartmann, Thomas and Mouline, Ludovic and Fouquet, Francois and Bourcier, Johann and Barais, Olivier and Traon, Yves Le},
  pages = {10},
  abstract = {The conviction that big data analytics is a key for the success of modern businesses is growing deeper, and the mobilisation of companies into adopting it becomes increasingly important. Big data integration projects enable companies to capture their relevant data, to efficiently store it, turn it into domain knowledge, and finally monetize it. In this context, historical data, also called temporal data, is becoming increasingly available and delivers means to analyse the history of applications, discover temporal patterns, and predict future trends. Despite the fact that most data that today's applications are dealing with is inherently temporal current approaches, methodologies, and environments for developing these applications don't provide sufficient support for handling time. We envision that Model-Driven Engineering (MDE) would be an appropriate ecosystem for a seamless and orthogonal integration of time into domain modelling and processing. In this paper, we investigate the state-of-the-art in MDE techniques and tools in order to identify the missing bricks for raising time-awareness in MDE and outline research directions in this emerging domain.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QGYVSHL9\\Benelallam et al. - Raising Time Awareness in Model-Driven Engineering.pdf},
  language = {en}
}

@article{benniCharacterizingBlackboxComposition2020,
  title = {Characterizing {{Black}}-Box {{Composition Operators}} via {{Generated Tailored Benchmarks}}.},
  author = {Benni, Benjamin and Mosser, S{\'e}bastien and Acherc, Mathieu and Paillart, Mathieu},
  year = {2020},
  volume = {19},
  pages = {7:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2020.19.2.a7},
  abstract = {The integration of a model composition operator into a system is a challenging task: the properties associated with such operators can drastically change how the developers will be able to use it. In this paper, we describe a modelling framework that allows a software developer, who is not an expert in model composition, to describe the interface of the operators she wants to use, and describe the properties she expects from them to fit her needs (e.g., idempotence, commutativity, associativity). This abstract description is used to pilot a property-based testing approach on generated code. We applied the approach to two case studies: feature model composition and Git merging.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IKD2W3NB\\Benni et al. - 2020 - Characterizing Black-box Composition Operators via.pdf},
  journal = {The Journal of Object Technology},
  language = {en},
  number = {2}
}

@inproceedings{benvenutiContractbasedFormalismSpecification2008,
  title = {A Contract-Based Formalism for the Specification of Heterogeneous Systems},
  booktitle = {2008 {{Forum}} on {{Specification}}, {{Verification}} and {{Design Languages}}},
  author = {Benvenuti, Luca and Ferrari, Alberto and Mangeruca, Leonardo and Mazzi, Emanuele and Passerone, Roberto and Sofronis, Christos},
  year = {2008},
  month = sep,
  pages = {142--147},
  publisher = {{IEEE}},
  address = {{Stuttgart}},
  doi = {10.1109/FDL.2008.4641436},
  abstract = {We present the mathematical formalism and the verification methodology of the contract-based model developed in the framework of the SPEEDS project. SPEEDS aims at developing methods and tools to support ``speculative design'', a design methodology in which distributed designers develop different aspects of the overall system, in a concurrent but controlled way. Our generic mathematical model of contract supports this style of development. This is achieved by focusing on behaviors, by supporting the notion of ``rich component'' where functional and non-functional aspects of the system can be considered and combined, by representing rich components via their set of associated contracts, and by formalizing the process of component composition.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\S4JL3LRW\\Benvenuti et al. - 2008 - A contract-based formalism for the specification o.pdf},
  isbn = {978-1-4244-2264-7},
  language = {en}
}

@book{berardSystemsSoftwareVerification2001,
  title = {Systems and {{Software Verification}}},
  author = {B{\'e}rard, B{\'e}atrice and Bidoit, Michel and Finkel, Alain and Laroussinie, Fran{\c c}ois and Petit, Antoine and Petrucci, Laure and Schnoebelen, Philippe and McKenzie, Pierre},
  year = {2001},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-04558-9},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7GQM6ZS6\\Bérard et al. - 2001 - Systems and Software Verification.pdf},
  isbn = {978-3-642-07478-3 978-3-662-04558-9},
  language = {en}
}

@incollection{bezivinCanonicalSchemeModel2006,
  title = {A {{Canonical Scheme}} for {{Model Composition}}},
  booktitle = {Model {{Driven Architecture}} \textendash{} {{Foundations}} and {{Applications}}},
  author = {B{\'e}zivin, Jean and Bouzitouna, Salim and Del Fabro, Marcos Didonet and Gervais, Marie-Pierre and Jouault, Fr{\'e}deric and Kolovos, Dimitrios and Kurtev, Ivan and Paige, Richard F.},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Rensink, Arend and Warmer, Jos},
  year = {2006},
  volume = {4066},
  pages = {346--360},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11787044_26},
  abstract = {There is little agreement on terminology in model composition, and even less on key characteristics of a model composition solution. We present three composition frameworks: the Atlas Model Weaver, the Epsilon Merging Language, and the Glue Generator Tool, and from them derive a core set of common definitions. We use this to outline the key requirements of a model composition solution, in terms of language and tool support.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\LLGNETK7\\Bézivin et al. - 2006 - A Canonical Scheme for Model Composition.pdf},
  isbn = {978-3-540-35909-8 978-3-540-35910-4},
  language = {en}
}

@inproceedings{boulangerSimulationMultiFormalismModels2008,
  title = {Simulation of {{Multi}}-{{Formalism Models}} with {{ModHel}}'{{X}}},
  booktitle = {2008 {{International Conference}} on {{Software Testing}}, {{Verification}}, and {{Validation}}},
  author = {Boulanger, Fr and Hardebolle, C},
  year = {2008},
  month = apr,
  pages = {318--327},
  publisher = {{IEEE}},
  address = {{Lillehammer, Norway}},
  doi = {10.1109/ICST.2008.15},
  abstract = {A step in the validation of a system is to check its behavior by simulation. Simulation is also used to validate the behavior of the model of the system against test patterns. For complex systems, models are made of parts which use different modeling formalisms. The main issues in the simulation of such systems are the specification of the semantics of each modeling formalism, and of the interactions between heterogeneous parts of a model. ModHel'X relies on component based modeling and models of computation to address these problems and focuses on the computation of one possible behavior of a model. This includes simulation and code generation. ModHel'X defines a MOF meta-model for describing the structural elements of a modeling language. The semantics of modeling languages is expressed in an imperative style and addresses three aspects: control, data and time. ModHel'X is supported by a simulator of multi-formalism models.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\LPQ4JWG6\\Boulanger og Hardebolle - 2008 - Simulation of Multi-Formalism Models with ModHel'X.pdf},
  isbn = {978-0-7695-3127-4},
  language = {en}
}

@article{braendshoeiConsistencyCheckingUML,
  title = {Consistency Checking {{UML}} Interactions and State Machines},
  author = {Braendshoei, Bjoern},
  pages = {148},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\L773PW8N\\Braendshoei - Consistency checking UML interactions and state ma.pdf},
  language = {en}
}

@book{brambillaModeldrivenSoftwareEngineering2017,
  title = {Model-Driven Software Engineering in Practice},
  author = {Brambilla, Marco and Cabot, Jordi and Wimmer, Manuel},
  year = {2017},
  edition = {Second},
  publisher = {{Morgan \& Claypool Publishers}},
  address = {{San Rafael, Calif.}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7ILJPVFG\\Brambilla et al. - 2017 - Model-driven software engineering in practice.pdf},
  isbn = {978-1-62705-708-0},
  language = {en},
  number = {4},
  series = {Synthesis Lectures on Software Engineering}
}

@article{brandCommunicatingFiniteStateMachines1983,
  title = {On {{Communicating Finite}}-{{State Machines}}},
  author = {Brand, Daniel and Zafiropulo, Pitro},
  year = {1983},
  month = apr,
  volume = {30},
  pages = {323--342},
  issn = {0004-5411, 1557-735X},
  doi = {10.1145/322374.322380},
  abstract = {A model of commumcations protocols based on finite-state machines is investigated. The problem addressed is how to ensure certain generally desirable properties, which make protocols "wellformed," that is, specify a response to those and only those events that can actually occur. It is determined to what extent the problem is solvable, and one approach to solving it ts described.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NI3MJTQA\\Brand og Zafiropulo - 1983 - On Communicating Finite-State Machines.pdf},
  journal = {Journal of the ACM},
  language = {en},
  number = {2}
}

@incollection{broyDefinitionSystemModel2009,
  title = {Definition of the System Model},
  author = {Broy, Manfred and Cengarle, Mar{\'i}a and Gr{\"o}nniger, Hans and Rumpe, Bernhard},
  year = {2009},
  month = oct,
  pages = {61--93},
  doi = {10.1002/9780470522622.ch4},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JBGWTHLA\\Lano - UML 2 SEMANTICS AND APPLICATIONS.pdf},
  isbn = {978-0-470-52262-2}
}

@book{broyPerspectivesSystemInformatics2003,
  title = {Perspectives of System Informatics: 5th {{International Andrei Ershov Memorial Conference}}, {{PSI}} 2003, {{Akademgorodok}}, {{Novosibirsk}}, {{Russia}}, {{July}} 9-12, 2003 ; Revised Papers},
  shorttitle = {Perspectives of System Informatics},
  editor = {Broy, M. and Zamulin, A. V.},
  year = {2003},
  publisher = {{Springer}},
  address = {{Berlin ; New York}},
  annotation = {OCLC: ocm54081486},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KME4ZVNA\\Broy und Zamulin - 2003 - Perspectives of system informatics 5th Internatio.pdf},
  isbn = {978-3-540-20813-6},
  keywords = {ocl,temporal logic},
  language = {en},
  lccn = {QA75.5 .I5443 2003},
  number = {2890},
  series = {Lecture Notes in Computer Science}
}

@article{bucchiaroneGrandChallengesModeldriven2020,
  title = {Grand Challenges in Model-Driven Engineering: An Analysis of the State of the Research},
  author = {Bucchiarone, Antonio and Cabot, Jordi and Paige, Richard and Pierantonio, Alfonso},
  year = {2020},
  month = jan,
  volume = {19},
  pages = {1--9},
  doi = {10.1007/s10270-019-00773-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XXJJ68L3\\Bucchiarone - Grand challenges in model-driven engineering an a.pdf},
  journal = {Software and Systems Modeling}
}

@article{burguenoContentsModelBasedSoftware2019,
  title = {Contents for a {{Model}}-{{Based Software Engineering Body}} of {{Knowledge}}},
  author = {Burgue{\~n}o, Loli and Ciccozzi, Federico and Famelis, Michalis and Kappel, Gerti and Lambers, Leen and Mosser, Sebastien and Paige, Richard F. and Pierantonio, Alfonso and Rensink, Arend and Salay, Rick and Taentzer, Gabriele and Vallecillo, Antonio and Wimmer, Manuel},
  year = {2019},
  month = dec,
  volume = {18},
  pages = {3193--3205},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-019-00746-9},
  abstract = {Although Model-Based Software Engineering (MBE) is a widely accepted Software Engineering (SE) discipline, no agreedupon core set of concepts and practices (i.e., a Body of Knowledge) has been defined for it yet. With the goals of characterizing the contents of the MBE discipline, promoting a global consistent view of it, clarifying its scope with regard to other SE disciplines, and defining a foundation for the development of educational curricula on MBE, this paper proposes the contents for a Body of Knowledge for MBE. We also describe the methodology that we have used to come up with the proposed list of contents, as well as the results of a survey study that we conducted to sound out the opinion of the community on the importance of the proposed topics and their level of coverage in the existing SE curricula.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\EWYGFXSI\\Burgueño et al. - 2019 - Contents for a Model-Based Software Engineering Bo.pdf},
  journal = {Software and Systems Modeling},
  language = {en},
  number = {6}
}

@incollection{cengarleHeterogeneousApproachUML2008,
  title = {A {{Heterogeneous Approach}} to {{UML Semantics}}},
  booktitle = {Concurrency, {{Graphs}} and {{Models}}},
  author = {Cengarle, Mar{\'i}a Victoria and Knapp, Alexander and Tarlecki, Andrzej and Wirsing, Martin},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Degano, Pierpaolo and De Nicola, Rocco and Meseguer, Jos{\'e}},
  year = {2008},
  volume = {5065},
  pages = {383--402},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-68679-8_23},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\R5BJT52V\\Concurrency, Graphs and Models Essays Dedicated to Ugo Montanari on the Occasion of His 65th Birthday by Rocco De Nicola, Pierpaolo Degano, José Meseguer (auth.), Pierpaolo Degano, Rocco De Nicola, Jo (z-lib.o.pdf},
  isbn = {978-3-540-68676-7 978-3-540-68679-8}
}

@inproceedings{chenCompositionalSpecificationBehavioral2007,
  title = {Compositional Specification of Behavioral Semantics},
  booktitle = {2007 Design, Automation Test in Europe Conference Exhibition},
  author = {Chen, Kai and Sztipanovits, Janos and Neema, Sandeep},
  year = {2007},
  pages = {1--6},
  doi = {10.1109/DATE.2007.364408},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JEGETTWY\\Chen - Compositional Specification of Behavioral Semantic.pdf}
}

@article{cheneyPrinciplesLeastChange2017,
  title = {On Principles of {{Least Change}} and {{Least Surprise}} for Bidirectional Transformations.},
  author = {Cheney, James and Gibbons, Jeremy and McKinna, James and Stevens, Perdita},
  year = {2017},
  volume = {16},
  pages = {3:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2017.16.1.a3},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GKYX8AHW\\Cheney et al. - 2017 - On principles of Least Change and Least Surprise f.pdf},
  journal = {The Journal of Object Technology},
  language = {en},
  number = {1}
}

@inproceedings{chenFormalModelingComponent2010,
  title = {A {{Formal Modeling}} for {{Component Behaviors Based}} on {{Event Track}}},
  booktitle = {2010 {{Fifth IEEE International Symposium}} on {{Service Oriented System Engineering}}},
  author = {Chen, Zhongyu and Zhang, Jichang and Miao, Huaikou and Guo, Zhenghu},
  year = {2010},
  month = jun,
  pages = {113--116},
  publisher = {{IEEE}},
  address = {{Nanjing, China}},
  doi = {10.1109/SOSE.2010.9},
  abstract = {System behaviors are implemented through interacting between components during the method of component-based software development. Therefore, how to formal the component behaviors have become an important problem. This paper presents a component behavioral modeling method based on event track, which utilize a process with the event track to describe the behavior of component, the event set may be involved in the components were extended to the pointed set, the possible behavior of component in a given environment seen as an event track. This method can effectively solve parallel composition of component behaviors with synchronization constraints. Finally, this paper illustrates concrete details by an example.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\R8WYPZR9\\Chen et al. - 2010 - A Formal Modeling for Component Behaviors Based on.pdf},
  isbn = {978-1-4244-7327-4},
  language = {en}
}

@article{choiTimingConsistencyChecking2016,
  title = {Timing Consistency Checking for {{UML}}/{{MARTE}} Behavioral Models},
  author = {Choi, Jinho and Jee, Eunkyoung and Bae, Doo-Hwan},
  year = {2016},
  month = sep,
  volume = {24},
  pages = {835--876},
  issn = {0963-9314, 1573-1367},
  doi = {10.1007/s11219-015-9290-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TZWGSA34\\Choi et al. - 2016 - Timing consistency checking for UMLMARTE behavior.pdf},
  journal = {Software Quality Journal},
  language = {en},
  number = {3}
}

@book{christelbaierPrinciplesModelChecking2010,
  title = {Principles of {{Model Checking}}},
  shorttitle = {{{CHRISTEL BAIER AND JOOST}}-{{PIETER KATOEN}} * {{Principles}} of {{Model Checking}}. {{MIT Press}} ({{May}} 2008). * {{ISBN}}},
  author = {{Christel Baier} and {Joost-Pieter Katoen}},
  year = {2010},
  month = jun,
  volume = {53},
  publisher = {{MIT Press}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IZMRXEUS\\Principles of Model Checking by Baier C., Katoen J. (z-lib.org).pdf},
  language = {en}
}

@article{cicchettiMultiviewApproachesSoftware2019,
  title = {Multi-View Approaches for Software and System Modelling: A Systematic Literature Review},
  shorttitle = {Multi-View Approaches for Software and System Modelling},
  author = {Cicchetti, Antonio and Ciccozzi, Federico and Pierantonio, Alfonso},
  year = {2019},
  month = dec,
  volume = {18},
  pages = {3207--3233},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-018-00713-w},
  abstract = {Over the years, a number of approaches have been proposed on the description of systems and software in terms of multiple views represented by models. This modelling branch, so-called multi-view software and system modelling, praises a differentiated and complex scientific body of knowledge. With this study, we aimed at identifying, classifying, and evaluating existing solutions for multi-view modelling of software and systems. To this end, we conducted a systematic literature review of the existing state of the art related to the topic. More specifically, we selected and analysed 40 research studies among over 8600 entries. We defined a taxonomy for characterising solutions for multi-view modelling and applied it to the selected studies. Lastly, we analysed and discussed the data extracted from the studies. From the analysed data, we made several observations, among which: (i) there is no uniformity nor agreement in the terminology when it comes to multi-view artefact types, (ii) multi-view approaches have not been evaluated in industrial settings and (iii) there is a lack of support for semantic consistency management and the community does not appear to consider this as a priority. The study results provide an exhaustive overview of the state of the art for multi-view software and systems modelling useful for both researchers and practitioners.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CVS5W4BK\\Cicchetti et al. - 2019 - Multi-view approaches for software and system mode.pdf},
  journal = {Software and Systems Modeling},
  language = {en},
  number = {6}
}

@book{clarkeHandbookModelChecking2018,
  title = {Handbook of {{Model Checking}}},
  editor = {Clarke, Edmund M. and Henzinger, Thomas A. and Veith, Helmut and Bloem, Roderick},
  year = {2018},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-10575-8},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JP72XZ7H\\Clarke et al. - 2018 - Handbook of Model Checking.pdf},
  isbn = {978-3-319-10574-1 978-3-319-10575-8},
  language = {en}
}

@article{clarkeStateSpaceReduction1999,
  title = {State Space Reduction Using Partial Order Techniques},
  author = {Clarke, E.M. and Grumberg, O. and Minea, M. and Peled, D.},
  year = {1999},
  month = nov,
  volume = {2},
  pages = {279--287},
  issn = {1433-2779, 1433-2787},
  doi = {10.1007/s100090050035},
  abstract = {With the advancement of computer technology, highly concurrent systems are being developed. The veri cation of such systems is a challenging task, as their state space grows exponentially with the number of processes. Partial order reduction is an e ective technique to address this problem. It relies on the observation that the e ect of executing transitions concurrently is often independent of their ordering. In this paper we present the basic principles behind partial order reduction and its implementation.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\F4L9P2F8\\Clarke et al. - 1999 - State space reduction using partial order techniqu.pdf},
  journal = {International Journal on Software Tools for Technology Transfer (STTT)},
  language = {en},
  number = {3}
}

@article{CompositionStateMachines,
  title = {Composition of State Machines (Formally)},
  pages = {44},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QHS9N96G\\03_Composition_of_state_machines.pdf},
  language = {en}
}

@article{corradiniConcurrentComputingPetri1995,
  title = {Concurrent {{Computing}}: From {{Petri Nets}} to {{Graph Grammars}}},
  shorttitle = {Concurrent {{Computing}}},
  author = {Corradini, Andrea},
  year = {1995},
  volume = {2},
  pages = {56--70},
  issn = {15710661},
  doi = {10.1016/S1571-0661(05)80181-1},
  abstract = {Petri nets are widely accepted as a speci cation formalism for concurrent and distributed systems. One of the reasons of their success is the fact that they are equipped with a rich theory, including well-understood concurrent semantics they also provide an interesting benchmark for tools and techniques for the description of concurrent systems.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7GCR3UID\\Corradini - 1995 - Concurrent Computing from Petri Nets to Graph Gra.pdf},
  journal = {Electronic Notes in Theoretical Computer Science},
  language = {en}
}

@inproceedings{costaVerigraphSystemSpecification2016,
  title = {Verigraph: {{A}} System for Specification and Analysis of Graph Grammars},
  booktitle = {Formal Methods: {{Foundations}} and Applications},
  author = {Costa, Andrei and Bezerra, Jonas and Azzi, Guilherme and Rodrigues, Leonardo and Becker, Thiago Rafael and Herdt, Ricardo Gabriel and Machado, Rodrigo},
  editor = {Ribeiro, Leila and Lecomte, Thierry},
  year = {2016},
  pages = {78--94},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  abstract = {Graph grammars are models that allow for a visual representation of both static and dynamic aspects of a system. There are several tools that allow the edition, simulation and analysis of graph grammars, each of them focusing on one kind of analysis technique or graph model. In this paper we present a new tool for simulation and analysis of graph grammars, called Verigraph, built with the following design principles: an implementation as direct as possible of formal concepts (to ease correctness arguments), a generic implementation of core algorithms (to allow its application for several graph models), and a reasonable running time. In this paper we present architectural aspects of Verigraph, together with a comparison with other similar tools in terms of available features.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8CD89T4T\\Costa et al. - 2016 - Verigraph A system for specification and analysis.pdf},
  isbn = {978-3-319-49815-7}
}

@inproceedings{cunhaFormalVerificationUML2011,
  title = {Formal {{Verification}} of {{UML Sequence Diagrams}} in the {{Embedded Systems Context}}},
  booktitle = {2011 {{Brazilian Symposium}} on {{Computing System Engineering}}},
  author = {Cunha, E. and Custodio, M. and Rocha, H. and Barreto, R.},
  year = {2011},
  month = nov,
  pages = {39--45},
  publisher = {{IEEE}},
  address = {{Florianopolis, Brazil}},
  doi = {10.1109/SBESC.2011.18},
  abstract = {This paper shows a method for translating UML sequence diagrams to Petri nets and verifying deadlock-freeness, reachability, safety and liveness properties by using a model checker. In this proposed method, the user has not to know about temporal logics to describe the property to be verified. Instead, the user may adopt a high-level properties specification interface, which is automatically translated to a suitable temporal logic. We show the application of the proposed method in an embedded control application that consists of a sensory device mounted on a motorized platform that must detect and track specific objects in the environment.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\973EHAH3\\Cunha et al. - 2011 - Formal Verification of UML Sequence Diagrams in th.pdf},
  isbn = {978-0-7695-4641-4 978-1-4673-0427-6},
  language = {en}
}

@inproceedings{czarneckiClassificationModelTransformation2003,
  title = {Classification of Model Transformation Approaches},
  author = {Czarnecki, K. and Helsen, S.},
  year = {2003},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IJJ5AKHB\\Czarnecki og Helsen - Classification of Model Transformation Approaches.pdf}
}

@inproceedings{czyzDeclarativeVisualDebugging2007,
  title = {Declarative and Visual Debugging in {{Eclipse}}},
  booktitle = {Proceedings of the 2007 {{OOPSLA}} Workshop on Eclipse Technology {{eXchange}}  - Eclipse '07},
  author = {Czyz, Jeffrey K. and Jayaraman, Bharat},
  year = {2007},
  pages = {31--35},
  publisher = {{ACM Press}},
  address = {{Montreal, Quebec, Canada}},
  doi = {10.1145/1328279.1328286},
  abstract = {We present a declarative and visual debugging environment for Eclipse called JIVE.1 Traditional debugging is procedural in that a programmer must proceed step-by-step and objectby-object in order to uncover the cause of an error. In contrast, we present a declarative approach to debugging consisting of a flexible set of queries over a program's execution history as well as over individual runtime states. This runtime information is depicted in a visual manner during program execution in order to aid the debugging process. The current state of execution is depicted through an enhanced object diagram, and the history of execution is depicted by a sequence diagram. Our methodology makes use of these diagrams as a means of formulating queries and reporting results in a visual manner. It also supports revisiting past runtime states, either through reverse stepping of the program or through queries that report information from past states. Eclipse serves as an ideal framework for implementing JIVE since, like the JIVE architecture, it makes crucial use of the Java Platform Debugging Architecture (JPDA). This paper presents details of the JIVE architecture and its integration into Eclipse.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WLW3BMMS\\Czyz und Jayaraman - 2007 - Declarative and visual debugging in Eclipse.pdf},
  isbn = {978-1-60558-015-9},
  language = {en}
}

@article{damConsistentMergingModel2016,
  title = {Consistent Merging of Model Versions},
  author = {Dam, Hoa Khanh and Egyed, Alexander and Winikoff, Michael and Reder, Alexander and {Lopez-Herrejon}, Roberto E.},
  year = {2016},
  month = feb,
  volume = {112},
  pages = {137--155},
  issn = {01641212},
  doi = {10.1016/j.jss.2015.06.044},
  abstract = {While many engineering tasks can, and should be, manageable independently, it does place a great burden on explicit collaboration needs\textemdash including the need for frequent and incremental merging of artifacts that software engineers manipulate using these tools. State-of-the-art merging techniques are often limited to textual artifacts (e.g., source code) and they are unable to discover and resolve complex merging issues beyond simple conflicts. This work focuses on the merging of models where we consider not only conflicts but also arbitrary syntactic and semantic consistency issues. Consistent artifacts are merged fully automatically and only inconsistent/conflicting artifacts are brought to the users' attention, together with a systematic proposal of how to resolve them. Our approach is neutral with regard to who made the changes and hence reduces the bias caused by any individual engineer's limited point of view. Our approach also applies to arbitrary design or models, provided that they follow a well-defined metamodel with explicit constraints\textemdash the norm nowadays. The extensive empirical evaluation suggests that our approach scales to practical settings.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\XT6LDGYE\\Dam et al. - 2016 - Consistent merging of model versions.pdf},
  journal = {Journal of Systems and Software},
  language = {en}
}

@inproceedings{davisMultidomainSuretyModeling1999,
  title = {Multi-Domain Surety Modeling and Analysis for High Assurance Systems},
  booktitle = {Proceedings {{ECBS}}'99. {{IEEE Conference}} and {{Workshop}} on {{Engineering}} of {{Computer}}-{{Based Systems}}},
  author = {Davis, J. and Scott, J. and Sztipanovits, J. and Martinez, M.},
  year = {1999},
  pages = {254--260},
  publisher = {{IEEE Comput. Soc}},
  address = {{Nashville, TN, USA}},
  doi = {10.1109/ECBS.1999.755889},
  abstract = {Engineering systems are becoming increasingly complex as state of the art technologies are incorporated into designs. Surety modeling and analysis is an emerging science that permits an engineer to qualitatively and quantitatively predict and assess the completeness and predictability of a design. Surety is a term often used in the Department of Defense (DoD) and Department of Energy (DOE) communities, which refers to the integration of safety, security, reliability and performance aspects of design. Current risk assessment technologies for analyzing complex systems fail to adequately describe the problem, thus making assessment fragmented and non-integrated. To address this problem, we have developed a methodology and extensible software toolset to address model integration and complexity for high consequence systems. The MultiGraph Architecture (MGA) facilitates multi-domain, model-integrated modeling and analyses of complex, high-assurance systems. The MGA modeling environment allows the engineer to customize the modeling environment to match a design paradigm representative of the actual design. Previous modeling tools have a predefined model space that forces the modeler to work in less than optimal environments. Current approaches force the problem to be bounded and constrained by requirements of the modeling tool and not the actual design problem. In some small cases, this is only marginally adequate. The MGA facilitates the implementation of a surety methodology, which is used to represent high assurance systems with respect to safety and reliability. Formal mathematical models are used to correctly describe design safety and reliability functionality and behavior. The functional and behavioral representations of the design are then analyzed using commercial-off-the-shelf (COTS) tools.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CS2V2XCH\\Davis et al. - 1999 - Multi-domain surety modeling and analysis for high.pdf},
  isbn = {978-0-7695-0028-7},
  language = {en}
}

@inproceedings{deantoniModelingBehavioralSemantics2016,
  title = {Modeling the {{Behavioral Semantics}} of {{Heterogeneous Languages}} and Their {{Coordination}}},
  booktitle = {2016 {{Architecture}}-{{Centric Virtual Integration}} ({{ACVI}})},
  author = {Deantoni, Julien},
  year = {2016},
  month = apr,
  pages = {12--18},
  publisher = {{IEEE}},
  address = {{Venice, Italy}},
  doi = {10.1109/ACVI.2016.9},
  abstract = {In the software and system modeling community, research on domain-specific modeling languages (DSMLs) is focused on providing technologies for developing languages and tools that allow domain experts to develop system solutions efficiently. Unfortunately, the current lack of support for explicitly relating concepts expressed in different DSMLs makes it very difficult for software and system engineers to reason about information spread across models describing different system aspects. As a particular challenge, we present in this paper how we dealt with relationships between heterogeneous behavioral models to support their concurrent and coordinated execution. This was achieved by providing dedicated meta-language to define the behavioral semantics of DSMLs and their coordination. The approach made explicit a formal model of the control flow (MoCC); domain-specific actions (DSA) and a well-defined protocol between them (incl., mapping, feedback and callback) reified through explicit domain-specific events (DSE). The protocol is then used to infer a relevant behavioral language interface for specifying coordination patterns to be applied on conforming executable models. As a result, heterogeneous languages and their relationships can be developed in the GEMOC studio, which provides extensive support to run and debug heterogeneous models. This is outlined in the paper on the definition of the Marked Graph language and its coordination with a scenario language.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\THZHNIS3\\Deantoni - 2016 - Modeling the Behavioral Semantics of Heterogeneous.pdf},
  isbn = {978-1-5090-2488-9},
  language = {en}
}

@inproceedings{demuthDesignSpaceInfrastructureMultiuser2015,
  title = {{{DesignSpace}}: An Infrastructure for Multi-User/Multi-Tool Engineering},
  shorttitle = {{{DesignSpace}}},
  booktitle = {Proceedings of the 30th {{Annual ACM Symposium}} on {{Applied Computing}}},
  author = {Demuth, Andreas and {Riedl-Ehrenleitner}, Markus and N{\"o}hrer, Alexander and Hehenberger, Peter and Zeman, Klaus and Egyed, Alexander},
  year = {2015},
  month = apr,
  pages = {1486--1491},
  publisher = {{ACM}},
  address = {{Salamanca Spain}},
  doi = {10.1145/2695664.2695697},
  abstract = {The engineering and maintenance of large (software) systems is an inherently collaborative process that involves diverse engineering teams, heterogeneous development artifacts, and different engineering tools. While teams have to collaborate continuously and their artifacts are often related, the tools they use are nearly always independent, single-user applications. These tools range from programming to modeling tools and cover a wide range of engineering disciplines. However, relations among the artifacts across these tools often remain undocumented and are handled in an adhoc manner. Keeping these artifacts in sync continues to be a key engineering challenge. In this paper, we present our vision of the DesignSpace, a novel engineering infrastructure for integrating diverse development artifacts and their relations. The DesignSpace supports distributed collaboration, a wide range of tools and development, maintenance , and evolution services including incremental consistency checking and transformation.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7HPQW9G4\\Demuth et al. - 2015 - DesignSpace an infrastructure for multi-usermult.pdf},
  isbn = {978-1-4503-3196-8},
  language = {en}
}

@incollection{diskinIntermodelingQueriesKleisli2012,
  title = {Intermodeling, {{Queries}}, and {{Kleisli Categories}}},
  booktitle = {Fundamental {{Approaches}} to {{Software Engineering}}},
  author = {Diskin, Zinovy and Maibaum, Tom and Czarnecki, Krzysztof},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and {de Lara}, Juan and Zisman, Andrea},
  year = {2012},
  volume = {7212},
  pages = {163--177},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-28872-2_12},
  abstract = {Specification and maintenance of relationships between models are vital for MDE. We show that a wide class of such relationships can be specified in a compact and precise manner, if intermodel mappings are allowed to link derived model elements computed by corresponding queries. Composition of such mappings is not straightforward and requires specialized algebraic machinery. We present a formal framework, in which such machinery can be defined generically for a wide class of metamodel definitions. This enables algebraic specification of practical intermodeling scenarios, e.g., model merge.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\LA4QUDIU\\Diskin et al. - 2012 - Intermodeling, Queries, and Kleisli Categories.pdf},
  isbn = {978-3-642-28871-5 978-3-642-28872-2},
  language = {en}
}

@article{diskinMultipleModelSynchronization2019,
  title = {Multiple Model Synchronization with Multiary Delta Lenses with Amendment {{andK}}-{{Putput}}},
  author = {Diskin, Zinovy and K{\"o}nig, Harald and Lawford, Mark},
  year = {2019},
  month = nov,
  volume = {31},
  pages = {611--640},
  issn = {0934-5043, 1433-299X},
  doi = {10.1007/s00165-019-00493-0},
  abstract = {Multiple (more than 2) model synchronization is ubiquitous and important for MDE, but its theoretical underpinning gained much less attention than the binary case. Specifically, the latter was extensively studied by the bx community in the framework of algebraic models for update propagation called lenses. We make a step to restore the balance and propose a notion of multiary delta lens. Besides multiarity, our lenses feature reflective updates, when consistency restoration requires some amendment of the update that violated consistency, and a reasonable PutPut law that requires compatibility of update propagation with update composition for a precisely specified restricted class of composable update pairs. We emphasize the importance of various ways of lens composition for practical applications of the framework, and prove several composition results.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4FNFUTEQ\\Diskin et al. - 2019 - Multiple model synchronization with multiary delta.pdf},
  journal = {Formal Aspects of Computing},
  language = {en},
  number = {5}
}

@incollection{domingoEvaluatingBenefitsModelDriven2020,
  title = {Evaluating the {{Benefits}} of {{Model}}-{{Driven Development}}: {{Empirical Evaluation Paper}}},
  shorttitle = {Evaluating the {{Benefits}} of {{Model}}-{{Driven Development}}},
  booktitle = {Advanced {{Information Systems Engineering}}},
  author = {Domingo, {\'A}frica and Echeverr{\'i}a, Jorge and Pastor, {\'O}scar and Cetina, Carlos},
  editor = {Dustdar, Schahram and Yu, Eric and Salinesi, Camille and Rieu, Dominique and Pant, Vik},
  year = {2020},
  volume = {12127},
  pages = {353--367},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-49435-3_22},
  abstract = {Researchers have been evaluating the benefits of ModelDriven Development (MDD) for more than a decade now. Although some works suggest that MDD decreases development time, other works limit MDD benefits to academic exercises and to developers without experience. To clarify the benefits of MDD, we present the results of our experiment, which compares MDD and Code-centric Development (CcD) in terms of correctness, efficiency, and satisfaction. Our experiment achieves fidelity to real-world settings because the tasks are taken from real-world video game development, and the subjects use domain frameworks as they are used in real-world developments. Our results challenge previous ideas that limit the benefits of MDD to academic exercises and to developers without experience. Furthermore, our results also suggest that understanding the benefits of MDD might require researchers to rethink their experiments to include the social part of software development.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KHQ83G5C\\Domingo et al. - 2020 - Evaluating the Benefits of Model-Driven Developmen.pdf},
  isbn = {978-3-030-49434-6 978-3-030-49435-3},
  language = {en}
}

@inproceedings{egyedFixingInconsistenciesUML2007,
  title = {Fixing {{Inconsistencies}} in {{UML Design Models}}},
  booktitle = {29th {{International Conference}} on {{Software Engineering}} ({{ICSE}}'07)},
  author = {Egyed, Alexander},
  year = {2007},
  month = may,
  pages = {292--301},
  publisher = {{IEEE}},
  address = {{Minneapolis, MN, USA}},
  issn = {0270-5257},
  doi = {10.1109/ICSE.2007.38},
  abstract = {Changes are inevitable during software development and so are their unintentional side effects. The focus of this paper is on UML design models, where unintentional side effects lead to inconsistencies. We demonstrate that a tool can assist the designer in discovering unintentional side effects, locating choices for fixing inconsistencies, and then in changing the design model. Our techniques are ``on-line,'' applied as the designer works, and non-intrusive, without overwhelming the designer. This is a significant improvement over the state-of-the-art. Our tool is fully integrated with the design tool IBM Rational Rose\texttrademark. It was empirically evaluated on 48 case studies.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UDTLH23Y\\Egyed - 2007 - Fixing Inconsistencies in UML Design Models.pdf},
  isbn = {978-0-7695-2828-1},
  language = {en}
}

@article{egyedMaintainingConsistencyEngineering2018,
  title = {Maintaining {{Consistency}} across {{Engineering Artifacts}}},
  author = {Egyed, Alexander and Zeman, Klaus and Hehenberger, Peter and Demuth, Andreas},
  year = {2018},
  month = feb,
  volume = {51},
  pages = {28--35},
  issn = {0018-9162},
  doi = {10.1109/MC.2018.1451666},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UH4ZMGUS\\Egyed et al. - 2018 - Maintaining Consistency across Engineering Artifac.pdf},
  journal = {Computer},
  language = {en},
  number = {2}
}

@book{ehrigFundamentalsAlgebraicGraph2006,
  title = {Fundamentals of Algebraic Graph Transformation},
  editor = {Ehrig, Hartmut},
  year = {2006},
  publisher = {{Springer}},
  address = {{Berlin ; New York}},
  annotation = {OCLC: ocm69242087},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DGILSA4T\\Ehrig - 2006 - Fundamentals of algebraic graph transformation.pdf},
  isbn = {978-3-540-31187-4},
  keywords = {Categories (Mathematics),Graph grammars,Graph theory,Morphisms (Mathematics)},
  language = {en},
  lccn = {QA267.3 .F86 2006},
  series = {Monographs in Theoretical Computer Science}
}

@incollection{ehrigGraphGrammarsPetri2004,
  title = {Graph {{Grammars}} and {{Petri Net Transformations}}},
  booktitle = {Lectures on {{Concurrency}} and {{Petri Nets}}},
  author = {Ehrig, Hartmut and Padberg, Julia},
  editor = {Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Desel, J{\"o}rg and Reisig, Wolfgang and Rozenberg, Grzegorz},
  year = {2004},
  volume = {3098},
  pages = {496--536},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-27755-2_14},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WMWXZ59V\\Ehrig og Padberg - 2004 - Graph Grammars and Petri Net Transformations.pdf},
  isbn = {978-3-540-22261-3 978-3-540-27755-2}
}

@article{ekerTamingHeterogeneityPtolemy2003,
  title = {Taming Heterogeneity - the {{Ptolemy}} Approach},
  author = {Eker, J. and Janneck, J.W. and Lee, E.A. and {Jie Liu} and {Xiaojun Liu} and Ludvig, J. and Neuendorffer, S. and Sachs, S. and {Yuhong Xiong}},
  year = {2003},
  month = jan,
  volume = {91},
  pages = {127--144},
  issn = {0018-9219},
  doi = {10.1109/JPROC.2002.805829},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7ZMER54H\\Eker et al. - 2003 - Taming heterogeneity - the Ptolemy approach.pdf},
  journal = {Proceedings of the IEEE},
  language = {en},
  number = {1}
}

@inproceedings{ellisDynamicChangeWorkflow1995,
  title = {Dynamic Change within Workflow Systems},
  booktitle = {Proceedings of Conference on {{Organizational}} Computing Systems  - {{COCS}} '95},
  author = {Ellis, Clarence and Keddara, Karim and Rozenberg, Grzegorz},
  year = {1995},
  pages = {10--21},
  publisher = {{ACM Press}},
  address = {{Milpitas, California, United States}},
  doi = {10.1145/224019.224021},
  abstract = {Dynamic change is a large and pervasive unsolved probing about the organizational purpose of the document being edited. Organizationally aware groupware can polem which surfaces within office systems as well as within software engineering, manufacturing, and numerous other domains. Procedural changes, performed in tentially lead to significantly more powerful and useful systems. One class of organizationally aware groupware is workflow. an ad hoc manner, can cause inefficiencies, inconsistencies, and catastrophic breakdowns within offices. This paper is concerned with dynamic change to procedures in the context of workfiow systems. How can we make workflow systems more flexible and open? We believe that part of the answer lies in the study and solution of the dynamic change problem. In this paper, we use a Petri net formalism to analyze structural change within office procedures. As an example, we define\textasciitilde a class of change called "synthetic cut-over change", and apply our formalism to prove that this class maintains correctness when downsizing occurs.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZF75Z4GQ\\Ellis et al. - 1995 - Dynamic change within workflow systems.pdf},
  isbn = {978-0-89791-706-3},
  language = {en}
}

@inproceedings{elmarzoukiStudyBehavioralStructural2016,
  title = {A Study of Behavioral and Structural Composition Methods and Techniques},
  booktitle = {2016 {{International Conference}} on {{Information Technology}} for {{Organizations Development}} ({{IT4OD}})},
  author = {Elmarzouki, Nisrine and Lakhrissi, Younes and Elmohajir, Mohammed},
  year = {2016},
  month = mar,
  pages = {1--6},
  publisher = {{IEEE}},
  address = {{Fez, Morocco}},
  doi = {10.1109/IT4OD.2016.7479254},
  abstract = {In Software Engineering as in all other engineering fields, the product to be build is divided into sub-parts that are independently constructed and subsequently assembled. This procedure reduces the complexity and improves the reuse of the developed products. MDE (Model Driven Engineering) is a recent software engineering discipline that focuses this approach. It has allowed several significant improvements in the development of complex software systems by providing the means that enable to switch from one abstraction level into another or from one modeling space into another. However, models management may be tedious and costly. Thus, it is necessary to provide some flexible and reliable tools for automatic management of models and some techniques for their transformations in order to live up to user expectations. In this context, model composition has become an important artifact in the MDE domain that allows constructing and composing an efficient assembly process. In this paper, we present the state of the art of recent works in the model composition methods and techniques by focusing on the various parameters that govern and characterize their behavior.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VU43TY82\\Elmarzouki et al. - 2016 - A study of behavioral and structural composition m.pdf},
  isbn = {978-1-4673-7689-1},
  language = {en}
}

@incollection{engelsDynamicMetaModeling2000,
  title = {Dynamic {{Meta Modeling}}: {{A Graphical Approach}} to the {{Operational Semantics}} of {{Behavioral Diagrams}} in {{UML}}},
  shorttitle = {Dynamic {{Meta Modeling}}},
  booktitle = {{$\ll$}{{UML}}{$\gg$} 2000 \textemdash{} {{The Unified Modeling Language}}},
  author = {Engels, Gregor and Hausmann, Jan Hendrik and Heckel, Reiko and Sauer, Stefan},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Evans, Andy and Kent, Stuart and Selic, Bran},
  year = {2000},
  volume = {1939},
  pages = {323--337},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-40011-7_23},
  abstract = {In this paper, dynamic meta modeling is proposed as a new approach to the operational semantics of behavioral UML diagrams. The dynamic meta model extends the well-known static meta model by a specification of the system's dynamics by means of collaboration diagrams. In this way, it is possible to define the behavior of UML diagrams within UML.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CSR3RCTU\\Engels et al. - 2000 - Dynamic Meta Modeling A Graphical Approach to the.pdf},
  isbn = {978-3-540-41133-8 978-3-540-40011-0},
  language = {en}
}

@article{engelsMethodologySpecifyingAnalyzing2001,
  title = {A Methodology for Specifying and Analyzing Consistency of Object-Oriented Behavioral Models},
  author = {Engels, Gregor and K{\"u}ster, Jochem M. and Heckel, Reiko and Groenewegen, Luuk},
  year = {2001},
  month = sep,
  volume = {26},
  pages = {186--195},
  issn = {0163-5948},
  doi = {10.1145/503271.503235},
  abstract = {Object-oriented modeling favors the modeling of object behavior from different viewpoints and the successive refinement of behavioral models in the development process. This gives rise to consistency problems of behavioral models. The absence of a formal semantics for UML models and the numerous possibilities of employing behavioral models within the development process lead to the rise of a number of different consistency notions. In this paper, we discuss the issue of consistency of behavioral models in the UML and present a general methodology how consistency problems can be dealt with. According to the methodology, those aspects of the models relevant to the consistency are mapped to a semantic domain in which precise consistency tests can be formulated. The choice of the semantic domain and the definition of consistency conditions can be used to construct different consistency notions. We show the applicability of our methodology by giving an example of a concrete consistency problem of concurrent object-oriented models.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\EL6SYMTN\\Engels et al. - 2001 - A methodology for specifying and analyzing consist.pdf},
  journal = {ACM SIGSOFT Software Engineering Notes},
  language = {en},
  number = {5}
}

@inproceedings{engelsRulebasedSpecificationBehavioral2001,
  title = {Rule-Based Specification of Behavioral Consistency Based on the {{UML}} Meta-Model},
  author = {Engels, Gregor and Heckel, Reiko and K{\"u}ster, Jochen},
  year = {2001},
  month = oct,
  volume = {2185},
  pages = {272--286},
  doi = {10.1007/3-540-45441-1_21},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\5NVZPVM8\\Rule-Based_Specification_of_Behavioral_Consistency.pdf},
  isbn = {978-3-540-42667-7},
  series = {{{LNCS}}}
}

@article{feldmannManagingIntermodelInconsistencies2019,
  title = {Managing Inter-Model Inconsistencies in Model-Based Systems Engineering: {{Application}} in Automated Production Systems Engineering},
  shorttitle = {Managing Inter-Model Inconsistencies in Model-Based Systems Engineering},
  author = {Feldmann, S. and Kernschmidt, K. and Wimmer, M. and {Vogel-Heuser}, B.},
  year = {2019},
  month = jul,
  volume = {153},
  pages = {105--134},
  issn = {01641212},
  doi = {10.1016/j.jss.2019.03.060},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WD832ADI\\Feldmann et al. - 2019 - Managing inter-model inconsistencies in model-base.pdf},
  journal = {Journal of Systems and Software},
  language = {en}
}

@book{fiadeiroCategoriesSoftwareEngineering2005,
  title = {Categories for Software Engineering},
  author = {Fiadeiro, Jos{\'e} Luiz},
  year = {2005},
  publisher = {{Springer-Verlag}},
  address = {{Berlin}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KXAPUKP2\\Fiadeiro - 2005 - Categories for software engineering.pdf},
  isbn = {978-3-540-20909-6},
  keywords = {Categories (Mathematics),Computer software,Development},
  language = {en},
  lccn = {QA76.76.D47 F53 2005}
}

@article{forwardModeldrivenRapidPrototyping2012,
  title = {Model-Driven Rapid Prototyping with {{Umple}}: {{MODEL}}-{{DRIVEN RAPID PROTOTYPING WITH UMPLE}}},
  shorttitle = {Model-Driven Rapid Prototyping with {{Umple}}},
  author = {Forward, Andrew and Badreddin, Omar and Lethbridge, Timothy C. and Solano, Julian},
  year = {2012},
  month = jul,
  volume = {42},
  pages = {781--797},
  issn = {00380644},
  doi = {10.1002/spe.1155},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\LWSJSFXK\\Forward et al. - 2012 - Model-driven rapid prototyping with Umple MODEL-D.pdf},
  journal = {Software: Practice and Experience},
  language = {en},
  number = {7}
}

@book{fowlerPatternsEnterpriseApplication2003,
  title = {Patterns of Enterprise Application Architecture},
  author = {Fowler, Martin},
  year = {2003},
  publisher = {{Addison-Wesley}},
  address = {{Boston}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8P2U3U35\\Fowler - 2003 - Patterns of enterprise application architecture.pdf},
  isbn = {978-0-321-12742-6},
  keywords = {Application software,Business,Computer architecture,Data processing,Development,System design},
  language = {en},
  lccn = {QA76.9.S88 F69 2003},
  series = {The {{Addison}}-{{Wesley}} Signature Series}
}

@inproceedings{franceModeldrivenDevelopmentComplex2007,
  title = {Model-Driven {{Development}} of {{Complex Software}}: {{A Research Roadmap}}},
  shorttitle = {Model-Driven {{Development}} of {{Complex Software}}},
  booktitle = {Future of {{Software Engineering}} ({{FOSE}} '07)},
  author = {France, Robert and Rumpe, Bernhard},
  year = {2007},
  month = may,
  pages = {37--54},
  publisher = {{IEEE}},
  address = {{Minneapolis, MN, USA}},
  doi = {10.1109/FOSE.2007.14},
  abstract = {The term Model-Driven Engineering (MDE) is typically used to describe software development approaches in which abstract models of software systems are created and systematically transformed to concrete implementations. In this paper we give an overview of current research in MDE and discuss some of the major challenges that must be tackled in order to realize the MDE vision of software development. We argue that full realizations of the MDE vision may not be possible in the near to medium-term primarily because of the wicked problems involved. On the other hand, attempting to realize the vision will provide insights that can be used to significantly reduce the gap between evolving software complexity and the technologies used to manage complexity.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IGC7D73Y\\France og Rumpe - 2007 - Model-driven Development of Complex Software A Re.pdf},
  isbn = {978-0-7695-2829-8},
  language = {en}
}

@article{gadducciGraphRewritingPcalculus2007,
  title = {Graph Rewriting for the {$\pi$}-Calculus},
  author = {GADDUCCI, FABIO},
  year = {2007},
  volume = {17},
  pages = {407--437},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/S096012950700610X},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9JLZYU2D\\Gadducci - Graph rewriting for the π-calculus.pdf},
  journal = {Mathematical Structures in Computer Science},
  number = {3}
}

@book{gammaDesignPatternsElements1994,
  title = {Design {{Patterns}} : {{Elements}} of {{Reusable Object}}-{{Oriented Software}}},
  author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
  year = {1994},
  publisher = {{Addison-Wesley Professional}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RP52RLHZ\\Gamma et al. - 1994 - Design Patterns  Elements of Reusable Object-Orie.pdf},
  language = {en}
}

@inproceedings{garroFormalCyberPhysical2016,
  title = {On Formal Cyber Physical System Properties Modeling: {{A}} New Temporal Logic Language and a {{Modelica}}-Based Solution},
  shorttitle = {On Formal Cyber Physical System Properties Modeling},
  booktitle = {2016 {{IEEE International Symposium}} on {{Systems Engineering}} ({{ISSE}})},
  author = {Garro, Alfredo and Tundis, Andrea and Bouskela, Daniel and Jardin, Audrey and Thuy, Nguyen and Otter, Martin and Buffoni, Lena and Fritzson, Peter and Sjolund, Martin and Schamai, Wladimir and Olsson, Hans},
  year = {2016},
  month = oct,
  pages = {1--8},
  publisher = {{IEEE}},
  address = {{Edinburgh, United Kingdom}},
  doi = {10.1109/SysEng.2016.7753137},
  abstract = {Modeling and Simulation methods, tools and techniques aim at supporting the different phases of the lifecycle of modern systems, going from requirements analysis to system design and operation. However, their effective application requires investigating several aspects such as the formal modeling of system requirements and the binding and automated composition between heterogeneous models (e.g. requirements models, architectural models, behavioral models). In this context, the paper presents a new formal requirement modeling language based on temporal logic, called FORM-L, and a software library, based on the Modelica language, that implements the constructs provided by FORM-L so as to enable the visual modeling of system properties as well as their verification through simulation. The effectiveness of the proposal is shown on a real case study concerning an Intermediate Cooling System.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MD7HK7LW\\Garro et al. - 2016 - On formal cyber physical system properties modelin.pdf},
  isbn = {978-1-5090-0793-6},
  language = {en}
}

@inproceedings{gestwickiInteractiveVisualizationJava2002,
  title = {Interactive Visualization of {{Java}} Programs},
  booktitle = {Proceedings {{IEEE}} 2002 Symposia on Human Centric Computing Languages and Environments},
  author = {Gestwicki, P. and Jayaraman, B.},
  year = {2002},
  pages = {226--235},
  doi = {10.1109/HCC.2002.1046375},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JLT4U3NI\\Gestwicki og Jayaraman - 2002 - Interactive visualization of Java programs.pdf}
}

@article{ghamarianModellingAnalysisUsing2012,
  title = {Modelling and Analysis Using {{GROOVE}}},
  author = {Ghamarian, Amir Hossein and {de Mol}, Maarten and Rensink, Arend and Zambon, Eduardo and Zimakova, Maria},
  year = {2012},
  month = feb,
  volume = {14},
  pages = {15--40},
  issn = {1433-2779, 1433-2787},
  doi = {10.1007/s10009-011-0186-x},
  abstract = {In this paper we present case studies that describe how the graph transformation tool groove has been used to model problems from a wide variety of domains. These case studies highlight the wide applicability of groove in particular, and of graph transformation in general. They also give concrete templates for using groove in practice. Furthermore, we use the case studies to analyse the main strong and weak points of groove.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6IVNAUT8\\Ghamarian et al. - 2012 - Modelling and analysis using GROOVE.pdf},
  journal = {International Journal on Software Tools for Technology Transfer},
  language = {en},
  number = {1}
}

@inproceedings{gogollaApplicationModelsFilmstrip2014,
  title = {From Application Models to Filmstrip Models: {{An}} Approach to Automatic Validation of Model Dynamics},
  booktitle = {Modellierung 2014},
  author = {Gogolla, Martin and Hamann, Lars and Hilken, Frank and Kuhlmann, Mirco and France, Robert},
  editor = {Fill, Hans-Georg and Karagiannis, Dimitris and Reimer, Ulrich},
  year = {2014},
  pages = {273--288},
  publisher = {{Gesellschaft f\"ur Informatik e.V.}},
  address = {{Bonn}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IU9M6925\\Gogolla et al. - 2014 - From application models to filmstrip models An ap.pdf}
}

@article{gronmoUMLSequenceDiagrams2011,
  title = {From {{UML}} 2 {{Sequence Diagrams}} to {{State Machines}} by {{Graph Transformation}}.},
  author = {Gr{\o}nmo, Roy and {M{\o}ller-Pedersen}, Birger},
  year = {2011},
  volume = {10},
  pages = {8:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2011.10.1.a8},
  abstract = {Algebraic graph transformation has been promoted by several authors as a means to specify model transformations. This paper explores how we can specify graph transformation-based rules for a classical problem of transforming from sequence diagrams to state machines. The specification of the transformation rules is based on the concrete syntax of sequence diagrams and state machines. We introduce tailored transformation support for sequence diagrams and a novel graphical operator to match and transform combined fragments.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Y7WN6P9J\\Grønmo og Møller-Pedersen - 2011 - From UML 2 Sequence Diagrams to State Machines by .pdf},
  journal = {The Journal of Object Technology},
  language = {en}
}

@inproceedings{grosse-rhodeAlgebraTransformationSystems1998,
  title = {Algebra Transformation Systems and Their Composition},
  booktitle = {Fundamental Approaches to Software Engineering},
  author = {{Gro{\ss}e-Rhode}, Martin},
  editor = {Astesiano, Egidio},
  year = {1998},
  pages = {107--122},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {Algebra transformation systems are introduced as formal models of components of open distributed systems. They are given by a transition graph modelling the control flow and partial algebras and method expressions modelling the data states and their transformations. According to this two-level structure they cover both labelled transition systems and rule based specification approaches, corresponding to information, computation and engineering viewpoint models. Different composition operations for algebra transformation systems are investigated. Limits and colimits model parallel and sequential composition of components, signature morphisms yield appropriate syntactical support for such compositions. The most important compositionality properties known from algebraic specification, like colimits of signatures and amalgamation of models, also hold for the framework of algebra transformation systems.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MYLUTBE7\\Grofle-Rhode - Algebra transformation systems and their compositi.pdf},
  isbn = {978-3-540-69723-7}
}

@book{guerraGraphTransformation12th2019,
  title = {Graph {{Transformation}}: 12th {{International Conference}}, {{ICGT}} 2019, {{Held}} as {{Part}} of {{STAF}} 2019, {{Eindhoven}}, {{The Netherlands}}, {{July}} 15\textendash 16, 2019, {{Proceedings}}},
  shorttitle = {Graph {{Transformation}}},
  editor = {Guerra, Esther and Orejas, Fernando},
  year = {2019},
  volume = {11629},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-23611-3},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\A759532X\\Guerra und Orejas - 2019 - Graph Transformation 12th International Conferenc.pdf},
  isbn = {978-3-030-23610-6 978-3-030-23611-3},
  language = {en},
  series = {Lecture {{Notes}} in {{Computer Science}}}
}

@incollection{habelAdhesiveTransformationSystems2012,
  title = {M, {{N}} -{{Adhesive Transformation Systems}}},
  booktitle = {Graph {{Transformations}}},
  author = {Habel, Annegret and Plump, Detlef},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Ehrig, Hartmut and Engels, Gregor and Kreowski, Hans-J{\"o}rg and Rozenberg, Grzegorz},
  year = {2012},
  volume = {7562},
  pages = {218--233},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-33654-6_15},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HEHVNGB7\\Ross - 1966 - The University of York.pdf},
  isbn = {978-3-642-33653-9 978-3-642-33654-6}
}

@book{harelComeLetPlay2003,
  title = {Come, {{Let}}'s {{Play}}},
  author = {Harel, David and Marelly, Rami},
  year = {2003},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-19029-2},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\J8IF5DSQ\\Harel und Marelly - 2003 - Come, Let’s Play.pdf},
  isbn = {978-3-642-62416-2 978-3-642-19029-2},
  language = {en}
}

@inproceedings{harelExecutableObjectModeling1996,
  title = {Executable Object Modeling with Statecharts},
  booktitle = {Proceedings of the 18th International Conference on Software Engineering},
  author = {Harel, David and Gery, Eran},
  year = {1996},
  pages = {246--257},
  publisher = {{IEEE Computer Society}},
  address = {{USA}},
  abstract = {This paper reports on an effort to develop an integrated set of diagrammatic languages for modeling object-oriented systems, and to construct a supporting tool. The goal is for models to be intuitive and well-structured, yet fully executable and analyzable, enabling automatic synthesis of usable and efficient code in object-oriented languages such as C++. At the heart of the modeling method is the language of statecharts for specifying object behavior, and a hierarchical OMT-like language for describing the structure of classes and their inter-relationships, that we call O-charts. Objects can interact by event generation, or by direct invocation of operations. In the interest of keeping the exposition manageable, we leave out some technically involved topics, such as multiple-thread concurrency and active objects.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IUT8QDGQ\\Harel und Gery - 1996 - Executable object modeling with statecharts.pdf},
  isbn = {0-8186-7246-3},
  keywords = {active objects,C++,diagrammatic languages,direct invocation,executable object modeling,hierarchical OMT-like language,integrated set,multiple-thread concurrency,O-charts,object-oriented languages,object-oriented programming,object-oriented systems,software tools,statecharts},
  series = {{{ICSE}} '96}
}

@article{harelPlayinPlayoutApproach,
  title = {The {{Play}}-in/{{Play}}-out {{Approach}} and {{Tool}}: {{Specifying}} and {{Executing Behavioral Requirements}}},
  author = {Harel, David and Kugler, Hillel and Marelly, Rami},
  pages = {5},
  abstract = {This leaves us with having to construct the LSCs manually, which is problematic, because despite the visuality, LSCs constitute a formal language, which will not always be appropriate for the people involved in the early stages of requirements capture. Towards the end of [2], this problem was addressed, and a higher-level approach to the problem of specifying scenario-based behavior, termed play-in scenarios, was proposed and briefly sketched. The details of this play-in methodology and the play-engine tool we have built to support it are given in [10]. The same paper also describes playout, a complementary idea to play-in, which, rather surprisingly, makes it possible to execute the requirements directly without having to build or synthesize an intra-object model of the system. In [11], smart play-out is introduced, which strengthens the `naive' play-out algorithms by using analytic techniques from the field of formal verification, mainly model checking.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8J6YKUNJ\\Harel et al. - The Play-inPlay-out Approach and Tool Specifying.pdf},
  language = {en}
}

@article{heckmanSystematicLiteratureReview2011,
  title = {A Systematic Literature Review of Actionable Alert Identification Techniques for Automated Static Code Analysis},
  author = {Heckman, Sarah and Williams, Laurie},
  year = {2011},
  month = apr,
  volume = {53},
  pages = {363--387},
  issn = {09505849},
  doi = {10.1016/j.infsof.2010.12.007},
  abstract = {Objective: The goal of this work is to synthesize available research results to inform evidence-based selection of actionable alert identification techniques (AAIT). Method: Relevant studies about AAITs were gathered via a systematic literature review. Results: We selected 21 peer-reviewed studies of AAITs. The techniques use alert type selection; contextual information; data fusion; graph theory; machine learning; mathematical and statistical models; or dynamic detection to classify and prioritize actionable alerts. All of the AAITs are evaluated via an example with a variety of evaluation metrics. Conclusion: The selected studies support (with varying strength), the premise that the effective use of ASA is improved by supplementing ASA with an AAIT. Seven of the 21 selected studies reported the precision of the proposed AAITs. The two studies with the highest precision built models using the subject program's history. Precision measures how well a technique identifies true actionable alerts out of all predicted actionable alerts. Precision does not measure the number of actionable alerts missed by an AAIT or how well an AAIT identifies unactionable alerts. Inconsistent use of evaluation metrics, subject programs, and ASAs in the selected studies preclude meta-analysis and prevent the current results from informing evidence-based selection of an AAIT. We propose building on an actionable alert identification benchmark for comparison and evaluation of AAIT from literature on a standard set of subjects and utilizing a common set of evaluation metrics.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\R4VDAF7H\\Heckman og Williams - 2011 - A systematic literature review of actionable alert.pdf},
  journal = {Information and Software Technology},
  language = {en},
  number = {4}
}

@inproceedings{hilkenCatalogStructuralBehavioral2016,
  title = {Towards a Catalog of Structural and Behavioral Verification Tasks for {{UML}}/{{OCL}} Models},
  booktitle = {Modellierung},
  author = {Hilken, Frank and Niemann, P. and Gogolla, M. and Wille, R.},
  year = {2016},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZRDW8DCA\\Hilken et al. - Towards a Catalog of Structural and Behavioral Ver.pdf}
}

@incollection{hilkenFilmstrippingUnrollingComparison2014,
  title = {Filmstripping and {{Unrolling}}: {{A Comparison}} of {{Verification Approaches}} for {{UML}} and {{OCL Behavioral Models}}},
  shorttitle = {Filmstripping and {{Unrolling}}},
  booktitle = {Tests and {{Proofs}}},
  author = {Hilken, Frank and Niemann, Philipp and Gogolla, Martin and Wille, Robert},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Kobsa, Alfred and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Terzopoulos, Demetri and Tygar, Doug and Weikum, Gerhard and Seidl, Martina and Tillmann, Nikolai},
  year = {2014},
  volume = {8570},
  pages = {99--116},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-09099-3_8},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KURZE2KK\\Hilken et al. - 2014 - Filmstripping and Unrolling A Comparison of Verif.pdf},
  isbn = {978-3-319-09098-6 978-3-319-09099-3}
}

@incollection{huzarConsistencyProblemsUMLBased2005,
  title = {Consistency {{Problems}} in {{UML}}-{{Based Software Development}}},
  booktitle = {{{UML Modeling Languages}} and {{Applications}}},
  author = {Huzar, Zbigniew and Kuzniarz, Ludwik and Reggio, Gianna and Sourrouille, Jean Louis},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Jardim Nunes, Nuno and Selic, Bran and {Rodrigues da Silva}, Alberto and Toval Alvarez, Ambrosio},
  year = {2005},
  volume = {3297},
  pages = {1--12},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-31797-5_1},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GD6HCLQ7\\Huzar et al. - 2005 - Consistency Problems in UML-Based Software Develop.pdf},
  isbn = {978-3-540-25081-4 978-3-540-31797-5},
  language = {en}
}

@misc{IntroductionCoAlgebra,
  title = {An Introduction to (Co)Algebra and (Co)Induction}
}

@inproceedings{iqbalTimeSemanticsExecutable2020,
  title = {Time Semantics of Executable Activity Diagrams for Relativized Conformance Testing},
  booktitle = {Proceedings of the 23rd {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}: {{Companion Proceedings}}},
  author = {Iqbal, Junaid and Truscan, Dragos and Vain, J{\"u}ri},
  year = {2020},
  month = oct,
  pages = {1--6},
  publisher = {{ACM}},
  address = {{Virtual Event Canada}},
  doi = {10.1145/3417990.3421399},
  abstract = {The executable subset of UML provides the ability to execute and simulate design models prior to implementation. In this paper, we introduce time semantics and relativized time input/output conformance rtioco relation for executable UML activity diagrams. The aforementioned features are essential and viable to perform online conformance testing. We present a tool support by extending the fUML execution engine, and demonstrate the approach on an example.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DW8R7BM8\\Iqbal et al. - 2020 - Time semantics of executable activity diagrams for.pdf},
  isbn = {978-1-4503-8135-2},
  language = {en}
}

@inproceedings{jacobsInteractiveVisualDebugging2003,
  title = {Interactive Visual Debugging with {{UML}}},
  booktitle = {Proceedings of the 2003 {{ACM}} Symposium on {{Software}} Visualization  - {{SoftVis}} '03},
  author = {Jacobs, Timothy and Musial, Benjamin},
  year = {2003},
  pages = {115},
  publisher = {{ACM Press}},
  address = {{San Diego, California}},
  doi = {10.1145/774833.774850},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TBZCU9KJ\\Jacobs und Musial - Interactive Visual Debugging with UML.pdf},
  isbn = {978-1-58113-642-5},
  language = {en}
}

@book{jacobsIntroductionCoalgebraMathematics2017,
  title = {Introduction to {{Coalgebra}}: {{Towards Mathematics}} of {{States}} and {{Observation}}},
  shorttitle = {Introduction to {{Coalgebra}}},
  author = {Jacobs, Bart},
  year = {2017},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/CBO9781316823187},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8TMTRQAS\\Jacobs - 2017 - Introduction to Coalgebra Towards Mathematics of .pdf},
  isbn = {978-1-316-82318-7},
  language = {en}
}

@article{jayaramanCompactVisualizationJava2017,
  title = {Compact Visualization of {{Java}} Program Execution: {{Compact}} Visualization of {{Java}} Program Execution},
  shorttitle = {Compact Visualization of {{Java}} Program Execution},
  author = {Jayaraman, S. and Jayaraman, B. and Lessa, D.},
  year = {2017},
  month = feb,
  volume = {47},
  pages = {163--191},
  issn = {00380644},
  doi = {10.1002/spe.2411},
  abstract = {The context of this work is a practical, open-source visualization system, called JIVE, that supports two forms of runtime visualizations of Java programs \textendash{} object diagrams and sequence diagrams. They capture, respectively, the current execution state and execution history of a Java program. These diagrams are similar to those found in the UML for specifying design\textendash time decisions. In our work, we construct these diagrams at execution time, thereby ensuring continuity of notation from design to execution. In so doing, a few extensions to the UML notation are proposed in order to better represent runtime behavior. As sequence diagrams can become long and unwieldy, we present techniques for their compact representation. A key result in this paper is a novel labeling scheme based upon regular expressions to compactly represent long sequences and an O r2 algorithm for computing these labels, where r is the length of the input sequence, based upon the concept of `tandem repeats' in a sequence. Horizontal compaction greatly helps minimize the extent of white space in sequence diagrams by the elimination of object lifelines and also by grouping lifelines together. We propose a novel extension to the sequence diagram to deal with out-of-model calls when the lifelines of certain classes of objects are filtered out of the visualization, but method calls may occur between in-model and out-of-model calls. The paper also presents compaction techniques for multithreaded Java execution with different forms of synchronization. Finally, we present experimental results from compacting the runtime visualizations of a variety of Java programs and execution trace sizes in order to demonstrate the practicality and efficacy of our techniques. Copyright \textcopyright{} 2016 John Wiley \& Sons, Ltd.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JNEDFMCM\\Jayaraman et al. - 2017 - Compact visualization of Java program execution C.pdf},
  journal = {Software: Practice and Experience},
  language = {en},
  number = {2}
}

@techreport{jerdingUsingVisualizationFoster1994,
  title = {Using Visualization to Foster Object-Oriented Program Understanding},
  author = {Jerding, Dean F. and Stasko, John T.},
  year = {1994},
  institution = {{Georgia Institute of Technology}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6FULWCZI\\Jerding og Stasko - 1994 - Using visualization to foster object-oriented prog.pdf}
}

@article{johnsonUnifyingSetBasedDeltaBased,
  title = {Unifying {{Set}}-{{Based}}, {{Delta}}-{{Based}} and {{Edit}}-{{Based Lenses}}},
  author = {Johnson, Michael},
  pages = {13},
  abstract = {There are many different types of lenses, but largely they fall into the three classes of the title: set-based, delta-based and edit-based lenses. This paper develops some of the general relationships between those classes. The main results are that a category of set-based lenses is a full subcategory of a category of delta-based lenses determined by sending sets to codiscrete categories; that symmetric set-based lenses can similarly be seen as symmetric delta-based lenses; that symmetric editbased lenses are able to be represented as symmetric delta-based lenses, although not as a subcategory; and that symmetric edit-based lenses can also be seen as spans of a new notion of asymmetric edit-based lenses. The importance of the paper is that it provides a substantial unification with concrete inter-conversions developed among the three main approaches to lenses in both their symmetric and asymmetric forms.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MGCBKNZT\\Johnson - Unifying Set-Based, Delta-Based and Edit-Based Len.pdf},
  language = {en}
}

@article{JVMEcosystemReport,
  title = {{{JVM Ecosystem Report}} 2020},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\A6DYX7MS\\jvm_2020.pdf}
}

@article{k.p.FiniteStateModel2021,
  title = {Finite-state Model Extraction and Visualization from {{Java}} Program Execution},
  author = {K. P., Jevitha and Jayaraman, Swaminathan and Jayaraman, Bharat and M, Sethumadhavan},
  year = {2021},
  month = feb,
  volume = {51},
  pages = {409--437},
  issn = {0038-0644, 1097-024X},
  doi = {10.1002/spe.2910},
  abstract = {Finite-state models are extensively used for discrete systems and they have also been adopted for the analysis and verification of concurrent systems. Programs that have a repetitive cycle, such as event-driven servers and controllers, lend themselves to finite-state modeling. In this article, we use the term model extraction to refer to the construction of a finite-state model from an execution trace of a Java program and a set of key attributes, that is, a subset of the fields of the objects in the program execution. By choosing different sets of attributes, different finite-state models (or views) of the execution can be obtained. Such models aid program comprehension and they can also be used in debugging a program. We present algorithms for model extraction and also for model abstraction in order to reduce the size of the extracted models so that they are amenable to visualization. For long executions, we show how to minimize the overhead of execution trace collection through a bytecode instrumentation technique; and, for large models, which are not amenable to visualization, we show how key properties of the extracted model can be checked against declarative specifications. We have implemented our techniques in the context of JIVE, an Eclipse plugin that supports runtime visualization and analysis of Java program executions. We illustrate our techniques through a collection of case studies of varying size and complexity, from classic problems of concurrency control to a medium-size protocol for authorization (OAuth2.0 protocol) to a large-scale software that underlies web applications (Apache Tomcat server).},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VEETGRBY\\K. P. et al. - 2021 - Finite‐state model extraction and visualization fr.pdf},
  journal = {Software: Practice and Experience},
  language = {en},
  number = {2}
}

@article{kahaniSynthesisStateMachine2020,
  title = {Synthesis of {{State Machine Models}}},
  author = {Kahani, Nafiseh and Bagherzadeh, Mojtaba and Cordy, James R},
  year = {2020},
  pages = {11},
  abstract = {The automated synthesis of behavioural models in the form of state machines (SMs) from higher-level specifications has a high potential impact on the efficiency and accuracy of software development using models. In this paper, inspired by program synthesis techniques, we propose a model synthesis approach that takes as input a structural model of a system and its desired system properties, and automatically synthesizes executable SMs for its components. To this end, we first generate a synthesis formula for each component, consistent with the system properties, and then perform a State Space Exploration (SSE) of each component, based on its synthesis formula. The result of the SSE is saved in a Labeled Transition System (LTS), for which we then synthesize detailed actions for each of its transitions. Finally, we transform the LTSs into UML-RT (UML real-time profile) SMs, and integrate them with the original structural models. We assess the applicability, performance, and scalability of our approach using several different use cases extracted from the literature.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\LMHZ2MK4\\Kahani et al. - 2020 - Synthesis of State Machine Models.pdf},
  language = {en}
}

@article{kerkoucheUMLColoredPetri2010,
  title = {A {{UML}} and {{Colored Petri Nets Integrated Modeling}} and {{Analysis Approach}} Using {{Graph Transformation}}.},
  author = {Kerkouche, Elhillali and Chaoui, Algeria Allaoua and Bourennane, El Bay and Labbani, Ouassila},
  year = {2010},
  volume = {9},
  pages = {25},
  issn = {1660-1769},
  doi = {10.5381/jot.2010.9.4.a2},
  abstract = {Nowadays, UML is considered to be the standardized language for object-oriented modeling and analysis. However, UML cannot be used for automatic analyses and simulation. In this paper, we propose an approach for transforming UML statechart and collaboration diagrams to Colored Petri net models. This transformation aims to bridge the gap between informal notation (UML diagrams) and more formal notation (Colored Petri net models) for analysis purposes. It produces highlystructured, graphical, and rigorously-analyzable models that facilitate early detection of errors such as deadlock and livelock. The approach is based on graph transformations where the input and output of the transformation process are graphs. The meta-modeling tool AToM3 is used. A case study is presented to illustrate our approach.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PF7YYWPV\\Kerkouche et al. - 2010 - A UML and Colored Petri Nets Integrated Modeling a.pdf},
  journal = {The Journal of Object Technology},
  language = {en},
  number = {4}
}

@article{kienzleUnifyingFrameworkHomogeneous2019,
  title = {A Unifying Framework for Homogeneous Model Composition},
  author = {Kienzle, J{\"o}rg and Mussbacher, Gunter and Combemale, Benoit and Deantoni, Julien},
  year = {2019},
  month = oct,
  volume = {18},
  pages = {3005--3023},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-018-00707-8},
  abstract = {The growing use of models for separating concerns in complex systems has lead to a proliferation of model composition operators. These composition operators have traditionally been defined from scratch following various approaches differing in formality, level of detail, chosen paradigm, and styles. Due to the lack of proper foundations for defining model composition (concepts, abstractions, or frameworks), it is difficult to compare or reuse composition operators. In this paper, we stipulate the existence of a unifying framework that reduces all structural composition operators to structural merging, and all composition operators acting on discrete behaviors to event scheduling. We provide convincing evidence of this hypothesis by discussing how structural and behavioral homogeneous model composition operators (i.e., weavers) can be mapped onto this framework. Based on this discussion, we propose a conceptual model of the framework and identify a set of research challenges, which, if addressed, lead to the realization of this framework to support rigorous and efficient engineering of model composition operators for homogeneous and eventually heterogeneous modeling languages.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GFIAD8RI\\Kienzle et al. - 2019 - A unifying framework for homogeneous model composi.pdf},
  journal = {Software \& Systems Modeling},
  language = {en},
  number = {5}
}

@inproceedings{kindlerIntegratingBehaviourSoftware2011,
  title = {Integrating Behaviour in Software Models: An Event Coordination Notation -- Concepts and Prototype},
  shorttitle = {Integrating Behaviour in Software Models},
  booktitle = {Proceedings of the {{Third Workshop}} on {{Behavioural Modelling}} - {{BM}}-{{FA}} '11},
  author = {Kindler, Ekkart},
  year = {2011},
  pages = {41--48},
  publisher = {{ACM Press}},
  address = {{Birmingham, United Kingdom}},
  doi = {10.1145/1993956.1993962},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\88KVL68G\\Kindler - Integrating behaviour in software models an event.pdf},
  isbn = {978-1-4503-0617-1},
  language = {en}
}

@incollection{kindlerModelBasedSoftwareEngineering2009,
  title = {Model-{{Based Software Engineering}} and {{Process}}-{{Aware Information Systems}}},
  booktitle = {Transactions on {{Petri Nets}} and {{Other Models}} of {{Concurrency II}}},
  author = {Kindler, Ekkart},
  editor = {Jensen, Kurt and {van der Aalst}, Wil M. P.},
  year = {2009},
  volume = {5460},
  pages = {27--45},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-00899-3_2},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\M6UNNAAA\\Kindler - 2009 - Model-Based Software Engineering and Process-Aware.pdf},
  isbn = {978-3-642-00898-6 978-3-642-00899-3}
}

@inproceedings{kindlerModelbasedSoftwareEngineering2010,
  title = {Model-Based Software Engineering: The Challenges of Modelling Behaviour},
  shorttitle = {Model-Based Software Engineering},
  booktitle = {Proceedings of the {{Second International Workshop}} on {{Behaviour Modelling Foundation}} and {{Applications}} - {{BM}}-{{FA}} '10},
  author = {Kindler, Ekkart},
  year = {2010},
  pages = {1--8},
  publisher = {{ACM Press}},
  address = {{Paris, France}},
  doi = {10.1145/1811147.1811151},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\H3KZRBDI\\Kindler - Model-based software engineering the challenges o.pdf},
  isbn = {978-1-60558-961-9},
  language = {en}
}

@incollection{kindlerModellingLocalGlobal2012,
  title = {Modelling {{Local}} and {{Global Behaviour}}: {{Petri Nets}} and {{Event Coordination}}},
  shorttitle = {Modelling {{Local}} and {{Global Behaviour}}},
  booktitle = {Transactions on {{Petri Nets}} and {{Other Models}} of {{Concurrency VI}}},
  author = {Kindler, Ekkart},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Jensen, Kurt and {van der Aalst}, Wil M. and Ajmone Marsan, Marco and Franceschinis, Giuliana and Kleijn, Jetty and Kristensen, Lars Michael},
  year = {2012},
  volume = {7400},
  pages = {71--93},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-35179-2_4},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SVHEBRHT\\Kindler - 2012 - Modelling Local and Global Behaviour Petri Nets a.pdf},
  isbn = {978-3-642-35178-5 978-3-642-35179-2}
}

@misc{kitchenhamGuidelinesPerformingSystematic2007,
  title = {Guidelines for Performing Systematic Literature Reviews in Software Engineering},
  author = {Kitchenham, B. and Charters, S},
  year = {2007},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TPZY7LU8\\Kitchenham og Charters - 2007 - Guidelines for performing systematic literature re.pdf}
}

@article{kitchenhamSystematicLiteratureReviews2009,
  title = {Systematic Literature Reviews in Software Engineering \textendash{} {{A}} Systematic Literature Review},
  author = {Kitchenham, Barbara and Pearl Brereton, O. and Budgen, David and Turner, Mark and Bailey, John and Linkman, Stephen},
  year = {2009},
  month = jan,
  volume = {51},
  pages = {7--15},
  issn = {09505849},
  doi = {10.1016/j.infsof.2008.09.009},
  abstract = {Background: In 2004 the concept of evidence-based software engineering (EBSE) was introduced at the ICSE04 conference. Aims: This study assesses the impact of systematic literature reviews (SLRs) which are the recommended EBSE method for aggregating evidence. Method: We used the standard systematic literature review method employing a manual search of 10 journals and 4 conference proceedings. Results: Of 20 relevant studies, eight addressed research trends rather than technique evaluation. Seven SLRs addressed cost estimation. The quality of SLRs was fair with only three scoring less than 2 out of 4. Conclusions: Currently, the topic areas covered by SLRs are limited. European researchers, particularly those at the Simula Laboratory appear to be the leading exponents of systematic literature reviews. The series of cost estimation SLRs demonstrate the potential value of EBSE for synthesising evidence and making it available to practitioners.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MGIYSUQL\\Kitchenham et al. - 2009 - Systematic literature reviews in software engineer.pdf},
  journal = {Information and Software Technology},
  language = {en},
  number = {1}
}

@inproceedings{klareCommonalitiesPreservingConsistency2019,
  title = {Commonalities for {{Preserving Consistency}} of {{Multiple Models}}},
  booktitle = {2019 {{ACM}}/{{IEEE}} 22nd {{International Conference}} on {{Model Driven Engineering Languages}} and {{Systems Companion}} ({{MODELS}}-{{C}})},
  author = {Klare, Heiko and Gleitze, Joshua},
  year = {2019},
  month = sep,
  pages = {371--378},
  publisher = {{IEEE}},
  address = {{Munich, Germany}},
  doi = {10.1109/MODELS-C.2019.00058},
  abstract = {Models are used to describe different properties of a software system. Those models often share information that is represented redundantly and, thus, has to be kept consistent. Defining model transformations between the involved metamodels is a common means to preserve the consistency of their instances. Such transformations specify the relations between instances of metamodels and how to enforce them. However, redundancies are often caused by different models containing representations of the same concept. We propose to make such common, duplicated concepts explicit instead of encoding them in transformations implicitly. We achieve this by defining an additional concept metamodel and the relations between it and the existing metamodels, which we call the Commonalities approach. We describe a language that allows to define both a concept metamodel and its relations to existing metamodels in one place, in order to achieve conciseness comparable to a direct transformation between the metamodels. Additionally, our approach allows hierarchical composition of concept metamodels to keep multiple models consistent. The expected benefits of our approach are an improved understandability of relations between metamodels by making the information about commonalities explicit, reduced errors in comparison to the combination of several transformations to keep multiple models consistent, and improved reusability because metamodels are not related directly, but only through concept metamodels.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\H66IPZX4\\Klare og Gleitze - 2019 - Commonalities for Preserving Consistency of Multip.pdf},
  isbn = {978-1-72815-125-0},
  language = {en}
}

@misc{kluteHOWYOUCAN2017,
  title = {{{HOW YOU CAN MODEL YOUR SOFTWARE USING STATE MACHINES}}},
  author = {Klute, Rainer},
  year = {2017},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8PQ76GY9\\Whitepaper Statemachines EN.pdf},
  language = {en}
}

@incollection{knappMultiviewConsistencyUML2018,
  title = {Multi-View {{Consistency}} in {{UML}}: {{A Survey}}},
  shorttitle = {Multi-View {{Consistency}} in {{UML}}},
  booktitle = {Graph {{Transformation}}, {{Specifications}}, and {{Nets}}},
  author = {Knapp, Alexander and Mossakowski, Till},
  editor = {Heckel, Reiko and Taentzer, Gabriele},
  year = {2018},
  volume = {10800},
  pages = {37--60},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-75396-6_3},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\5CNPCEMX\\Heckel und Taentzer - 2018 - Graph Transformation, Specifications, and Nets In-48-71.pdf;C\:\\Users\\Tim\\Zotero\\storage\\UJCAYVSX\\könig_version.pdf},
  isbn = {978-3-319-75395-9 978-3-319-75396-6}
}

@inproceedings{kochGraphicalDebuggingDistributed2015,
  title = {Graphical Debugging of Distributed Applications - Using {{UML}} Object Diagrams to Visualize the State of Distributed Applications at Runtime},
  booktitle = {Proceedings of the 3rd International Conference on Model-Driven Engineering and Software Development},
  author = {Koch, Andreas and Z{\"u}ndorf, Albert},
  year = {2015},
  pages = {223--230},
  publisher = {{SCITEPRESS - Science and Technology Publications, Lda}},
  address = {{Setubal, PRT}},
  doi = {10.5220/0005233202230230},
  abstract = {While debugging is one of the most time consuming tasks software developers perform, the tool support, especially for distributed applications, is lacking according to many professional developers. The Visual Debugger is an approach to provide an easy-to-use tool which gives software developers an abstract view on the current state of their application in debugging sessions. While similar tools for non distributed applications already exist, the Visual Debugger addresses the more complex debugging scenarios in distributed applications. Therefore, several views with different levels of abstraction of the current state of an application are provided. Although the approach may be adapted to other object oriented programming languages, the current target of the Visual Debugger is languages running on the Java Virtual Machine with the focus on Java.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8XCIC3LS\\2015 - Graphical Debugging of Distributed Applications - .pdf},
  isbn = {978-989-758-083-3},
  keywords = {Debug,Distributed,Eclipse,Objectdiagram,Tool,UML2},
  series = {{{MODELSWARD}} 2015}
}

@article{kollingBlueJSystemIts2003,
  title = {The {{BlueJ}} System and Its Pedagogy},
  author = {K{\"o}lling, Michael and Quig, Bruce and Patterson, Andrew and {John Rosenberg}},
  year = {2003},
  volume = {13},
  pages = {249--268},
  publisher = {{Routledge}},
  doi = {10.1076/csed.13.4.249.17496},
  eprint = {https://doi.org/10.1076/csed.13.4.249.17496},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TCNLFG8E\\Kölling et al. - 2003 - The BlueJ system and its pedagogy.pdf},
  journal = {Computer Science Education},
  number = {4}
}

@inproceedings{kollingObjectorientedProgramDevelopment1996,
  title = {An Object-Oriented Program Development Environment for the First Programming Course},
  booktitle = {Proceedings of the Twenty-Seventh {{SIGCSE}} Technical Symposium on Computer Science Education},
  author = {K{\"o}lling, Michael and Rosenberg, John},
  year = {1996},
  pages = {83--87},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/236452.236514},
  abstract = {Over the last ten years there has been a major shift in programming language design from procedural languages to object-oriented languages. Most universities have adopted an object-oriented language for their first programming course. However, far less consideration has been given to the program development environment. In this paper we argue that the environment is possibly more important than the language and existing environments fail to fully support the object-oriented paradigm. We describe a new program development environment and show how it has been specifically designed to support object-oriented design and programming.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TG2JS9FJ\\Kölling og Rosenberg - 1996 - An object-oriented program development environment.pdf},
  isbn = {0-89791-757-X},
  series = {{{SIGCSE}} '96}
}

@inproceedings{kolovosDifferentModelsModel2009,
  title = {Different Models for Model Matching: {{An}} Analysis of Approaches to Support Model Differencing},
  shorttitle = {Different Models for Model Matching},
  booktitle = {2009 {{ICSE Workshop}} on {{Comparison}} and {{Versioning}} of {{Software Models}}},
  author = {Kolovos, Dimitrios S. and Di Ruscio, Davide and Pierantonio, Alfonso and Paige, Richard F.},
  year = {2009},
  month = may,
  pages = {1--6},
  publisher = {{IEEE}},
  address = {{Vancouver, BC, Canada}},
  doi = {10.1109/CVSM.2009.5071714},
  abstract = {Calculating differences between models is an important and challenging task in Model Driven Engineering. Model differencing involves a number of steps starting with identifying matching model elements, calculating and representing their differences, and finally visualizing them in an appropriate way. In this paper, we provide an overview of the fundamental steps involved in the model differencing process and summarize the advantages and shortcomings of existing approaches for identifying matching model elements. To assist potential users in selecting one of the existing methods for the problem at stake, we investigate the trade-offs these methods impose in terms of accuracy and effort required to implement each one of them.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ENMWQUTK\\Kolovos et al. - 2009 - Different models for model matching An analysis o.pdf},
  isbn = {978-1-4244-3714-6},
  language = {en}
}

@article{kongSpecifyingBehavioralSemantics2009,
  title = {Specifying Behavioral Semantics of {{UML}} Diagrams through Graph Transformations},
  author = {Kong, Jun and Zhang, Kang and Dong, Jing and Xu, Dianxiang},
  year = {2009},
  month = feb,
  volume = {82},
  pages = {292--306},
  issn = {01641212},
  doi = {10.1016/j.jss.2008.06.030},
  abstract = {The Unified Modeling Language (UML) has been widely accepted as a standard for modeling software systems from various perspectives. The intuitive notations of UML diagrams greatly improve the communication among developers. However, the lack of a formal semantics makes it difficult to automate analysis and verification. This paper offers a graphical yet formal approach to specifying the behavioral semantics of statechart diagrams using graph transformation techniques. It supports many advanced features of statecharts, such as composite states, firing priority, history, junction, and choice. In our approach, a graph grammar is derived automatically from a state machine to summarize the hierarchy of states. Based on the graph grammar, the execution of a set of non-conflict state transitions is interpreted by a sequence of graph transformations. This facilitates verifying a design model against system requirements. To demonstrate our approach, we present a case study on a toll-gate system.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DEZLCFA6\\Kong et al. - 2009 - Specifying behavioral semantics of UML diagrams th.pdf},
  journal = {Journal of Systems and Software},
  language = {en},
  number = {2}
}

@article{konigDynamicChangeProcess2009,
  title = {Dynamic Change in Process Management Systems},
  author = {K{\"o}nig, Harald},
  year = {2009},
  month = aug,
  volume = {2009},
  pages = {1--20},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3NIIQ8Q7\\König - 2009 - Dynamic change in process management systems.pdf},
  journal = {Forschungsberichet der FHDW Hannover}
}

@inproceedings{konigGraphRewritingSemantics2000,
  title = {A Graph Rewriting Semantics for the Polyadic Calculus},
  booktitle = {{{ICALP}} Workshops 2000, Proceedings of the Satelite Workshops of the 27th International Colloquium on Automata, Languages and Programming, Geneva, Switzerland, July 9-15, 2000},
  author = {K{\"o}nig, Barbara},
  editor = {Rolim, Jos{\'e} D. P. and Broder, Andrei Z. and Corradini, Andrea and Gorrieri, Roberto and Heckel, Reiko and Hromkovic, Juraj and Vaccaro, Ugo and Wells, J. B.},
  year = {2000},
  pages = {451--458},
  publisher = {{Carleton Scientific, Waterloo, Ontario, Canada}},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/icalp/Konig00a.bib},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\M4XF98J9\\Ko - A Graph Rewriting Semantics for the Polyadic π-Cal.pdf},
  timestamp = {Sat, 04 Apr 2020 17:15:23 +0200}
}

@inproceedings{konigSinglePushoutRewriting2020,
  title = {Single {{Pushout Rewriting}} in {{Comprehensive Systems}}},
  booktitle = {Graph {{Transformation}}},
  author = {K{\"o}nig, Harald and St{\"u}nkel, Patrick},
  editor = {Gadducci, Fabio and Kehrer, Timo},
  year = {2020},
  pages = {91--108},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-51372-6_6},
  abstract = {The elegance of the single-pushout (SPO) approach to graph transformations arises from substituting total morphisms by partial ones in the underlying category. Thus, SPO's applicability depends on the durability of pushouts after this transition. There is a wide range of work on the question when pushouts exist in categories with partial morphisms starting with the pioneering work of L\"owe and Kennaway and ending with an essential characterisation in terms of an exactness property (for the interplay between pullbacks and pushouts) and an adjointness condition (w.r.t. inverse image functions) by Hayman and Heindel.Triple graphs and graph diagrams are frameworks to synchronize two or more updatable data sources by means of internal mappings, which identify common sub-structures. Comprehensive systems generalise these frameworks, treating the network of data sources and their structural inter-relations as a homogeneous comprehensive artifact, in which partial maps identify commonalities. Although this inherent partiality produces amplified complexity, Heindel's characterisation still yields cocompleteness of the category of comprehensive systems equipped with closed partial morphisms and thus enables computing by SPO graph transformation.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PCFCJXK9\\König und Stünkel - 2020 - Single Pushout Rewriting in Comprehensive Systems.pdf},
  isbn = {978-3-030-51372-6},
  keywords = {Category theory,Comprehensive system,Hereditary pushout,Partial morphism,Single Pushout Rewriting,Upper adjoint},
  language = {en},
  series = {Lecture {{Notes}} in {{Computer Science}}}
}

@article{konigWellstructuredGraphTransformation2017,
  title = {Well-Structured Graph Transformation Systems},
  author = {K{\"o}nig, Barbara and St{\"u}ckrath, Jan},
  year = {2017},
  month = feb,
  volume = {252},
  pages = {71--94},
  issn = {08905401},
  doi = {10.1016/j.ic.2016.03.005},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZKVAUWHF\\König and Stückrath - 2017 - Well-structured graph transformation systems.pdf},
  journal = {Information and Computation},
  language = {en}
}

@article{kouznetsovaUsingBlueJBlackjack2007,
  title = {Using {{BlueJ}} and Blackjack to Teach Object-Oriented Design Concepts in {{CS1}}},
  author = {Kouznetsova, Svetlana},
  year = {2007},
  month = apr,
  volume = {22},
  pages = {49--55},
  publisher = {{Consortium for Computing Sciences in Colleges}},
  address = {{Evansville, IN, USA}},
  issn = {1937-4771},
  abstract = {This paper describes a sequence of Java programming assignments for the CS1 course which can be used to reinforce the basic concepts of object-oriented design in a logical, consistent way. By using the BlueJ environment, even programming novices are able to develop, over the course of four assignments, a working implementation of the card game Blackjack. Because the concepts are presented in the context of a fun and familiar application, the assignment increases their level of engagement. In addition, since students are allowed to discover for themselves the advantages of object-oriented design, they develop a better understanding of the material.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VBBJ8QXS\\Kouznetsova - 2007 - USING BLUEJ AND BLACKJACK TO TEACH OBJECT- ORIENTE.pdf},
  issue_date = {April 2007},
  journal = {J. Comput. Sci. Coll.},
  number = {4}
}

@article{kraeuterEntwicklungSemantikZur,
  title = {{Entwicklung einer Semantik zur Ausf\"uhrung von Produktionsabl\"aufen f\"ur das Produktionsmanagement in der POSY-OutputFactory der SET GmbH}},
  author = {Kr{\"a}uter, Tim},
  pages = {95},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3LTC7QRK\\Kräuter - Entwicklung einer Semantik zur Ausführung von Prod.pdf},
  language = {de}
}

@article{krauterIntegratingBehavioralModels,
  title = {Integrating Behavioral Models into Multi Modelling},
  author = {Kr{\"a}uter, Tim},
  pages = {13},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9LS8X8BP\\Kräuter - Integrating behavioral models into multi modelling.pdf},
  language = {en}
}

@article{kuhneMattersMetaModeling2006,
  title = {Matters of ({{Meta}}-) {{Modeling}}},
  author = {K{\"u}hne, Thomas},
  year = {2006},
  month = nov,
  volume = {5},
  pages = {369--385},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-006-0017-9},
  abstract = {With the recent trend to model driven engineering a common understanding of basic notions such as ``model'' and ``metamodel'' becomes a pivotal issue. Even though these notions have been in widespread use for quite a while, there is still little consensus about when exactly it is appropriate to use them. The aim of this article is to start establishing a consensus about generally acceptable terminology. Its main contributions are the distinction between two fundamentally different kinds of model roles, i.e. ``token model'' versus ``type model'' (The terms ``type'' and ``token'' have been introduced by C.S. Peirce, 1839\textendash 1914.), a formal notion of ``metaness'', and the consideration of ``generalization'' as yet another basic relationship between models. In particular, the recognition of the fundamental difference between the above mentioned two kinds of model roles is crucial in order to enable communication among the model driven engineering community that is free of both unnoticed misunderstandings and unnecessary disagreement.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9PKFUDK2\\Kühne - 2006 - Matters of (Meta-) Modeling.pdf},
  journal = {Software \& Systems Modeling},
  language = {en},
  number = {4}
}

@book{kunzeBehaviouralModelsModelling2016,
  title = {Behavioural Models: From Modelling Finite Automata to Analysing Business Processes},
  shorttitle = {Behavioural Models},
  author = {Kunze, Matthias and Weske, Mathias},
  year = {2016},
  publisher = {{Springer}},
  address = {{Cham}},
  annotation = {OCLC: 964659270},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GKDWSD7Y\\bsim.pdf;C\:\\Users\\Tim\\Zotero\\storage\\RT8BVX4E\\Kunze und Weske - 2016 - Behavioural models from modelling finite automata.pdf},
  isbn = {978-3-319-44960-9 978-3-319-44958-6},
  language = {en}
}

@inproceedings{kuskeFormalSemanticsUML2001,
  title = {A Formal Semantics of {{UML}} State Machines Based on Structured Graph Transformation},
  booktitle = {{$\ll$}{{UML}}{$\gg$} 2001 \textemdash{} {{The}} Unified Modeling Language. {{Modeling}} Languages, Concepts, and Tools},
  author = {Kuske, Sabine},
  editor = {Gogolla, Martin and Kobryn, Cris},
  year = {2001},
  pages = {241--256},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {UML state machines are quite popular and useful to specify dynamic components of software systems. They have a formal static semantics but their execution semantics is described only informally. Graph transformation, on the other hand, constitutes a well-studied area with many theoretical results and practical application domains. In this paper, an operational semantics for a subset of UML state machines is proposed which is based on graph transformation. In more detail, a UML state machine is described as a structured graph transformation system in such a way that the wellformedness rules of UML state machines are satisfied and the firing of a (maximum) set of enabled non-conflicting transitions corresponds to the application of a graph transformation rule. The presented approach uses the concept of transformation units, a recently developed modularization concept for graph transformation systems.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CRUUKI7H\\2001_Book_UML2001TheUnifiedModelingLangu-255-270.pdf},
  isbn = {978-3-540-45441-0}
}

@inproceedings{kusterExplicitBehavioralConsistency2003,
  title = {Towards Explicit Behavioral Consistency Concepts in the {{UML}}},
  booktitle = {Proceedings of 2nd {{ICSE}} Workshop on Scenarios and State Machines: {{Models}}, Algorithms, and Tools (Portland, {{USA}})},
  author = {K{\"u}ster, Jochen and Stehr, Jan},
  year = {2003},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PBAX8AK3\\Kuster and Stehr - Towards Explicit Behavioral Consistency Concepts i.pdf}
}

@incollection{lamConsistencyCheckingSequence2005,
  title = {Consistency {{Checking}} of {{Sequence Diagrams}} and {{Statechart Diagrams Using}} the {$\pi$}-{{Calculus}}},
  booktitle = {Integrated {{Formal Methods}}},
  author = {Lam, Vitus S. W. and Padget, Julian},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Romijn, Judi and Smith, Graeme and {van de Pol}, Jaco},
  year = {2005},
  volume = {3771},
  pages = {347--365},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11589976_20},
  abstract = {UML 2.0, like UML 1.x, provides only a set of notations for specifying different aspects of a system. The problem of checking consistency between various types of models in software development is still not fully addressed. In this paper, we suggest the use of an algebraic approach for verifying whether consistency between sequence diagrams and statechart diagrams is preserved. First, statechart diagrams are encoded in the {$\pi$}-calculus. Then, each object in a sequence diagram is translated into its equivalent {$\pi$}-calculus definitions and verified against the corresponding statechart diagram represented in the {$\pi$}-calculus using the Mobility Workbench. The applicability of the proposed approach is illustrated with an agent-based payment protocol.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QY3WQ72U\\Lam og Padget - 2005 - Consistency Checking of Sequence Diagrams and Stat.pdf},
  isbn = {978-3-540-30492-0 978-3-540-32240-5},
  language = {en}
}

@inproceedings{larsenModeldrivenBasedEnvironment2015,
  title = {A Model-Driven Based Environment for Automatic Model Coordination},
  author = {Larsen, M.E.V. and DeAntoni, J. and Combemale, B. and Mallet, F.},
  year = {2015},
  volume = {1554},
  pages = {44--47},
  document_type = {Conference Paper},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SIWN97IJ\\Larsen et al. - A Model-Driven Based Environment for Automatic Mod.pdf},
  series = {{{CEUR Workshop Proceedings}}},
  source = {Scopus}
}

@article{leblebiciInterModelConsistencyChecking,
  title = {Inter-{{Model Consistency Checking}} and {{Restoration}} with {{Triple Graph Grammars}}},
  author = {Leblebici, Erhan},
  pages = {185},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NME624TK\\Leblebici - Inter-Model Consistency Checking and Restoration w.pdf;C\:\\Users\\Tim\\Zotero\\storage\\ZATJZM7L\\TGG.pdf},
  language = {en}
}

@article{ledecziComposingDomainspecificDesign2001,
  title = {Composing Domain-Specific Design Environments},
  author = {Ledeczi, A. and Bakay, A. and Maroti, M. and Volgyesi, P. and Nordstrom, G. and Sprinkle, J. and Karsai, G.},
  year = {Nov./2001},
  volume = {34},
  pages = {44--51},
  issn = {00189162},
  doi = {10.1109/2.963443},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\85VKABK7\\Ledeczi et al. - 2001 - Composing domain-specific design environments.pdf},
  journal = {Computer},
  language = {en},
  number = {11}
}

@article{liCompositionAADLComponents2013,
  title = {Composition of {{AADL}} Components by Transformation to Interface Automata},
  author = {Li, J. and Zhao, J. and Sun, Q. and Huang, X. and Zhang, Y. and Zhang, T.},
  year = {2013},
  volume = {320},
  pages = {522--529},
  doi = {10.1007/978-3-642-35795-4_66},
  document_type = {Conference Paper},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ASY3WPVV\\Li et al. - 2013 - Composition of AADL components by transformation t.pdf},
  journal = {Communications in Computer and Information Science},
  source = {Scopus}
}

@article{linDSMDiffDifferentiationTool2007,
  title = {{{DSMDiff}}: A Differentiation Tool for Domain-Specific Models},
  shorttitle = {{{DSMDiff}}},
  author = {Lin, Yuehua and Gray, Jeff and Jouault, Fr{\'e}d{\'e}ric},
  year = {2007},
  month = aug,
  volume = {16},
  pages = {349--361},
  issn = {0960-085X, 1476-9344},
  doi = {10.1057/palgrave.ejis.3000685},
  abstract = {Model differentiation techniques, which provide the capability to identify mappings and differences between models, are essential to many model development and management practices. There has been initial research toward model differentiation applied to UML diagrams, but differentiation of domain-specific models has not been explored deeply in the modeling community. Traditional modeling practice using the UML relies on a single fixed generalpurpose language (i.e., all UML diagrams conform to a single metamodel). In contrast, DomainSpecific Modeling (DSM) is an emerging model-driven paradigm in which multiple metamodels are used to define various modeling languages that represent the key concepts and abstractions for particular domains. Therefore, domain-specific models may conform to various metamodels, which requires model differentiation algorithms be metamodel-independent and able to apply to multiple domain-specific modeling languages. This paper presents metamodel-independent algorithms and associated tools for detecting mappings and differences between domain-specific models, with facilities for graphical visualization of the detected differences.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RWAT6VIB\\Lin et al. - 2007 - DSMDiff a differentiation tool for domain-specifi.pdf},
  journal = {European Journal of Information Systems},
  language = {en},
  number = {4}
}

@inproceedings{liuFormalSemanticsComplete2013,
  title = {A Formal Semantics for Complete {{UML}} State Machines with Communications},
  booktitle = {Integrated Formal Methods},
  author = {Liu, Shuang and Liu, Yang and Andr{\'e}, {\'E}tienne and Choppy, Christine and Sun, Jun and Wadhwa, Bimlesh and Dong, Jin Song},
  editor = {Johnsen, Einar Broch and Petre, Luigia},
  year = {2013},
  pages = {331--346},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {UML is a widely used notation, and formalizing its semantics is an important issue. Here, we concentrate on formalizing UML state machines, used to express the dynamic behaviour of software systems. We propose a formal operational semantics covering all features of the latest version (2.4.1) of UML state machines specification. We use labelled transition systems as the semantic model, so as to use automatic verification techniques like model checking. Furthermore, our proposed semantics includes synchronous and asynchronous communications between state machines. We implement our approach in USM2C, a model checker supporting editing, simulation and automatic verification of UML state machines. Experiments show the effectiveness of our approach.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\56HTUX8P\\Liu et al. - 2013 - A formal semantics for complete UML state machines.pdf},
  isbn = {978-3-642-38613-8}
}

@article{loweAlgebraicGraphTransformations2015,
  title = {Algebraic Graph Transformations with Inheritance and Abstraction},
  author = {L{\"o}we, Michael and K{\"o}nig, Harald and Schulz, Christoph and Schultchen, Marius},
  year = {2015},
  month = sep,
  volume = {107-108},
  pages = {2--18},
  issn = {01676423},
  doi = {10.1016/j.scico.2015.02.004},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\REW3JJ94\\Löwe et al. - 2015 - Algebraic graph transformations with inheritance a.pdf},
  journal = {Science of Computer Programming},
  language = {en}
}

@article{loweRefactoringInformationSystems2011,
  title = {Refactoring Information Systems: Association Folding and Unfolding},
  shorttitle = {Refactoring Information Systems},
  author = {L{\"o}we, Michael},
  year = {2011},
  month = aug,
  volume = {36},
  pages = {1--7},
  issn = {0163-5948},
  doi = {10.1145/1988997.1989011},
  abstract = {In a former paper [14], we introduced a mechanism for objectoriented model evolution with automatic instance migration: Models are just graphs, typed instances (i. e. object worlds) are modelled as comma categories 'under' these models, and the evolution/migration mechanism is formalised by functors between these comma categories. In this paper, we carefully revise the mechanism: We characterise refactorings as model evolutions the induced migrations of which do not change the information contained in any conforming object world. And we carefully review, adapt, and correct model evolutions and instance migrations presented in [14] so that they become real and practical applicable refactorings in the precise sense introduced here.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\2XTBYBJG\\Löwe - REFACTORING INFORMATION SYSTEMS.pdf},
  journal = {ACM SIGSOFT Software Engineering Notes},
  language = {en},
  number = {4}
}

@article{loweRefactoringInformationSystems2019,
  title = {Refactoring {{Information Systems}} - {{Association Folding}} and {{Unfolding Revisited}}},
  author = {L{\"o}we, Michael},
  year = {2019},
  month = nov,
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PCJ8AS69\\Löwe - 2011 - Refactoring information systems association foldi.pdf}
}

@article{lucasSystematicReviewUML2009,
  title = {A Systematic Review of {{UML}} Model Consistency Management},
  author = {Lucas, Francisco J. and Molina, Fernando and Toval, Ambrosio},
  year = {2009},
  month = dec,
  volume = {51},
  pages = {1631--1645},
  issn = {09505849},
  doi = {10.1016/j.infsof.2009.04.009},
  abstract = {Information System (IS) development has been beset by consistency problems since its infancy. These problems are greater still in UML software development, and are principally caused by the existence of multiple views (models) for the same system, and may involve potentially contradictory system specifications. Since a considerable amount of work takes place within the scope of model consistency management, this paper presents a systematic literature review (SLR) which was carried out to discover the various current model consistency conceptions, proposals, problems and solutions provided. To do this, a total of 907 papers related to UML model consistency published in literature and extracted from the most relevant scientific sources (IEEE Computer Society, ACM Digital Library, Google Scholar, ScienceDirect, and the SCOPUS Database) were considered, of which 42 papers were eventually analyzed. This systematic literature review resulted in the identification of the current state-of-the-art with regard to UML model consistency management research along with open issues, trends and future research within this scope. A formal approach for the handling of inconsistency problems which fulfils the identified limitations is also briefly presented.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\E6QISRUB\\Lucas et al. - 2009 - A systematic review of UML model consistency manag.pdf},
  journal = {Information and Software Technology},
  language = {en},
  number = {12}
}

@article{macedoComposingLeastchangeLenses2013,
  title = {Composing {{Least}}-Change {{Lenses}}},
  author = {Macedo, Nuno and Pacheco, Hugo and Cunha, Alcino and Oliveira, Jos{\'e} Nuno},
  year = {2013},
  month = sep,
  pages = {Volume 57: Bidirectional Transformations 2013},
  publisher = {{European Association of Software Science and Technology}},
  doi = {10.14279/TUJ.ECEASST.57.868},
  abstract = {Non-trivial bidirectional transformations (BXs) are inherently ambiguous, as there are in general many different ways to consistently translate an update from one side to the other. Existing BX languages and frameworks typically satisfy fundamental first principles which ensure acceptable and stable (well-behaved) translation. Unfortunately, these give little insight about how a particular update translation is chosen among the myriad possible. From the user perspective, such unpredictability may hinder the adoption of BX frameworks.    The problem can be remedied by imposing a ``principle of least change'' which, in a state-based framework, amounts to translating each update in a way such that its result is as close as possible to the original state, according to some distance measure.    Starting by formalizing such BXs focusing on the particular framework of lenses, this paper discusses whether such least-change lenses can be defined by composition, an essential construct of BX frameworks. For sequential composition, two (dual) update translation alternatives are presented: a classical deterministic one and a nondeterministic. A key ingredient of the approach is the elegant formalization of the main concepts in relation algebra, which exposes several similarities and dualities.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\PE9S82M3\\Macedo et al. - 2013 - Composing Least-change Lenses.pdf},
  journal = {Electronic Communications of the EASST},
  language = {en}
}

@article{macedoFeatureBasedClassificationModel2017,
  title = {A {{Feature}}-{{Based Classification}} of {{Model Repair Approaches}}},
  author = {Macedo, Nuno and Jorge, Tiago and Cunha, Alcino},
  year = {2017},
  month = jul,
  volume = {43},
  pages = {615--640},
  issn = {0098-5589, 1939-3520},
  doi = {10.1109/TSE.2016.2620145},
  abstract = {Consistency management, the ability to detect, diagnose and handle inconsistencies, is crucial during the development process in Model-driven Engineering (MDE). As the popularity and application scenarios of MDE expanded, a variety of different techniques were proposed to address these tasks in specific contexts. Of the various stages of consistency management, this work focuses on inconsistency handling in MDE, particularly in model repair techniques. This paper proposes a feature-based classification system for model repair techniques, based on an systematic literature review of the area. We expect this work to assist developers and researchers from different disciplines in comparing their work under a unifying framework, and aid MDE practitioners in selecting suitable model repair approaches.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\RQUIXTRH\\Macedo et al. - 2017 - A Feature-Based Classification of Model Repair App.pdf},
  journal = {IEEE Transactions on Software Engineering},
  language = {en},
  number = {7}
}

@article{maciasMultilevelCoupledModel2019,
  title = {Multilevel Coupled Model Transformations for Precise and Reusable Definition of Model Behaviour},
  author = {Mac{\'i}as, Fernando and Wolter, Uwe and Rutle, Adrian and Dur{\'a}n, Francisco and {Rodriguez-Echeverria}, Roberto},
  year = {2019},
  month = aug,
  volume = {106},
  pages = {167--195},
  issn = {23522208},
  doi = {10.1016/j.jlamp.2018.12.005},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CJYY6AWQ\\Macıas et al. - Multilevel Coupled Model Transformations for Preci.pdf},
  journal = {Journal of Logical and Algebraic Methods in Programming},
  language = {en}
}

@phdthesis{maciasMultilevelModellingDomainSpecific2019,
  title = {Multilevel {{Modelling}} and {{Domain}}-{{Specific Languages}}},
  author = {Mac{\'i}as, Fernando},
  year = {2019},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\7TFGSRRN\\Macías - Multilevel Modelling and Domain-Specific Languages.pdf},
  language = {en},
  school = {University of Oslo}
}

@book{maclaneCategoriesWorkingMathematician1998,
  title = {Categories for the Working Mathematician},
  author = {MacLane, Saunders},
  year = {1998},
  publisher = {{Springer-Verlag}},
  address = {{New York}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\V6YTXQZ3\\Mac Lane - Categories for the Working Mathematician.pdf},
  keywords = {CategoryTheory}
}

@article{mcneilePrincipleComprehensiveModelling,
  title = {The {{Principle}} of {{Comprehensive Modelling Applied}} to {{Data}} and {{Behaviour}}},
  author = {McNeile, Ashley},
  pages = {5},
  abstract = {In their paper ``Trace Semantics are Fully Abstract'' Nain and Vardi propose that denotational semantics of behavioural modelling formalisms should adhere to the ``Principle of Comprehensive Modelling'' which requires models are exhaustive of all possible circumstances. However their exploration of this principle is made only in the context of machines that use sets of single symbols to define their state and alphabet. We extend the application of the principle to the denotational semantics of machines that use data structures, rather than single symbols, for the definition of state and alphabet. We show that, in the context of modelling the interaction between data and behaviour, this extension enables a unification of what are normally considered distinct styles of behavioural composition.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\A434USPN\\McNeile - The Principle of Comprehensive Modelling Applied t.pdf},
  language = {en}
}

@article{mendez-acunaLeveragingSoftwareProduct2016,
  title = {Leveraging {{Software Product Lines Engineering}} in the Development of External {{DSLs}}: {{A}} Systematic Literature Review},
  shorttitle = {Leveraging {{Software Product Lines Engineering}} in the Development of External {{DSLs}}},
  author = {{M{\'e}ndez-Acu{\~n}a}, David and Galindo, Jos{\'e} A. and Degueule, Thomas and Combemale, Beno{\^i}t and Baudry, Beno{\^i}t},
  year = {2016},
  month = nov,
  volume = {46},
  pages = {206--235},
  issn = {14778424},
  doi = {10.1016/j.cl.2016.09.004},
  abstract = {The use of domain-specific languages (DSLs) has become a successful technique in the development of complex systems. Consequently, nowadays we can find a large variety of DSLs for diverse purposes. However, not all these DSLs are completely different; many of them share certain commonalities coming from similar modeling patterns \textendash{} such as state machines or petri nets \textendash{} used for several purposes. In this scenario, the challenge for language designers is to take advantage of the commonalities existing among similar DSLs by reusing, as much as possible, formerly defined language constructs. The objective is to leverage previous engineering efforts to minimize implementation from scratch. To this end, recent research in software language engineering proposes the use of product line engineering, thus introducing the notion of language product lines. Nowadays, there are several approaches that result useful in the construction of language product lines. In this article, we report on an effort for organizing the literature on language product line engineering. More precisely, we propose a definition for the life-cycle of language product lines, and we use it to analyze the capabilities of current approaches. In addition, we provide a mapping between each approach and the technological space it supports.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FIERU7J3\\Méndez-Acuña et al. - 2016 - Leveraging Software Product Lines Engineering in t.pdf},
  journal = {Computer Languages, Systems \& Structures},
  language = {en}
}

@inproceedings{mengCoalgebraicSemanticFramework2008,
  title = {A {{Coalgebraic Semantic Framework}} for {{Reasoning}} about {{UML Sequence Diagrams}}},
  booktitle = {2008 {{The Eighth International Conference}} on {{Quality Software}}},
  author = {Meng, Sun and Barbosa, Lu{\'i}s S.},
  year = {2008},
  month = aug,
  pages = {17--26},
  publisher = {{IEEE}},
  address = {{Oxford, United Kingdom}},
  doi = {10.1109/QSIC.2008.13},
  abstract = {If, as a well-known aphorism states, modelling is for reasoning , this paper is an attempt to define and apply a formal semantics to UML sequence diagrams in order to enable rigourous reasoning about them. Actually, model transformation plays a fundamental role in the process of software development, in general, and in model driven engineering in particular. Being a de facto standard in this area, UML is no exception, even if the number and diversity of diagrams expressing UML models makes it difficult to base its semantics on a single framework. This paper builds on previous attempts to base UML semantics in a coalgebraic setting and illustrates the application of the proposed framework to reason about composition and refactoring of sequence diagrams.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NEWXGSH7\\Meng und Barbosa - 2008 - A Coalgebraic Semantic Framework for Reasoning abo.pdf},
  isbn = {978-0-7695-3312-4},
  language = {en}
}

@article{milewskiCategoryTheoryProgrammers2019,
  title = {Category {{Theory}} for {{Programmers}}},
  author = {Milewski, Bartosz},
  year = {2019},
  pages = {498},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QP3ZDZG8\\Milewski - Category Theory for Programmers.pdf},
  language = {en}
}

@book{milnerCalculusCommunicatingSystems1980,
  title = {A Calculus of Communicating Systems},
  author = {Milner, Robin},
  year = {1980},
  publisher = {{Springer}},
  address = {{Berlin}},
  annotation = {OCLC: 6649199},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CYRDNJ6C\\Milner - 1980 - A calculus of communicating systems.pdf},
  isbn = {978-3-540-10235-9 978-0-387-10235-1},
  language = {en},
  number = {92},
  series = {Lecture Notes in Computer Science}
}

@book{milnerCommunicatingMobileSystems2010,
  title = {Communicating and Mobile Systems: The Pi-Calculus},
  shorttitle = {Communicating and Mobile Systems},
  author = {Milner, Robin},
  year = {2010},
  edition = {7. print},
  publisher = {{Cambridge Univ. Press}},
  address = {{Cambridge}},
  annotation = {OCLC: 844961838},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TIPVWRB4\\Milner - 2010 - Communicating and mobile systems the pi-calculus.pdf},
  isbn = {978-0-521-65869-0 978-0-521-64320-7},
  language = {eng}
}

@article{misbhauddinUMLModelRefactoring2015,
  title = {{{UML}} Model Refactoring: A Systematic Literature Review},
  shorttitle = {{{UML}} Model Refactoring},
  author = {Misbhauddin, Mohammed and Alshayeb, Mohammad},
  year = {2015},
  month = feb,
  volume = {20},
  pages = {206--251},
  issn = {1382-3256, 1573-7616},
  doi = {10.1007/s10664-013-9283-7},
  abstract = {Model-driven engineering, an emerging trend in software engineering, has enabled the use of refactoring to UML models. Numerous approaches to model refactoring, problem detection, consistency management, and tool support to automate and verify refactoring are discussed and distributed across numerous research literatures. This paper provides a systematic overview of existing research in the field of model refactoring. A total of 3,295 articles, related to the field of UML model refactoring, were extracted from wellknown electronic databases. A multi-stage selection process was used to ensure proper inclusion of relevant studies for review and analysis. Ninety-four primary studies were eventually selected and analyzed based on a number of different criteria: UML models considered for refactoring, formalisms used to support refactoring at the model level, important to consider when building refactoring tool support, and the effect of refactoring on model quality. The results of this review indicate that UML model refactoring is a highly active area of research. Quite a few quality techniques and approaches have been proposed in this area, but it still has some important open issues and limitations to be addressed in future work.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\6P9QUTRP\\Misbhauddin und Alshayeb - 2015 - UML model refactoring a systematic literature rev.pdf},
  journal = {Empirical Software Engineering},
  language = {en},
  number = {1}
}

@unpublished{MITStateMachines,
  title = {{{MIT State}} Machines},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\C7KVSCGD\\MIT6_01SCS11_chap04.pdf}
}

@incollection{montanariHistoryDependentAutomataIntroduction2005,
  title = {History-{{Dependent Automata}}: {{An Introduction}}},
  shorttitle = {History-{{Dependent Automata}}},
  booktitle = {Formal {{Methods}} for {{Mobile Computing}}},
  author = {Montanari, Ugo and Pistore, Marco},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Bernardo, Marco and Bogliolo, Alessandro},
  year = {2005},
  volume = {3465},
  pages = {1--28},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11419822_1},
  abstract = {In this paper we give an overview of History Dependent Automata, an extension of ordinary automata that overcomes their limitations in dealing with named calculi. In a named calculus, the observations labelling the transitions of a system may contain names which represent features such as communication channels, node identifiers, or the locations of the system. An example of named calculus is {$\pi$}-calculus, which has the ability of sending channel names as messages and thus of dynamically reconfiguring process acquaintances and of modeling agents and code mobility. We show that History-Dependent Automata allow for a compact representation of {$\pi$}-calculus processes which is suitable both for theoretical investigations and for practical purposes such as verification.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IYJ2KXFA\\Montanari og Pistore - 2005 - History-Dependent Automata An Introduction.pdf},
  isbn = {978-3-540-25697-7 978-3-540-32021-0},
  language = {en}
}

@article{mukhiyaGraphQLApproachHealthcare2019,
  title = {A {{GraphQL}} Approach to {{Healthcare Information Exchange}} with {{HL7 FHIR}}},
  author = {Mukhiya, Suresh Kumar and Rabbi, Fazle and I Pun, Violet Ka and Rutle, Adrian and Lamo, Yngve},
  year = {2019},
  volume = {160},
  pages = {338--345},
  issn = {18770509},
  doi = {10.1016/j.procs.2019.11.082},
  abstract = {Abstract Interoperability is accepted as a fundamental necessity for the successful realization of Healthcare Information Systems. It can be aInctheireovpeedrabbyiluittyiliizsinagccceopntseidstaesntasftuannddaamrdesndteafil nniencgesssyintytafcotricthaendsuscecmeasnsftuicl mreeaalinziantgioonfothf eHienaflotrhmcaarteioInnfboerimngateixocnhSaynsgteedm. sH. LIt7cFaHn IbRe iaschoineeveodf sbuycuhtiolipzeinngstcaonndsairsdtesnftosrtaHnedaalrtdhsIndfeofirnminagtiosynnEtaxccthicanagned (sHemIEa)n.tWic hmileeanHinLg7oFfHthIRe isnufpoprmorattsioRnebpereinsegnetxatcihoannagl eSdt.atHeLT7raFnHsfIeRr (isRoEnSeTo)fasrucchhiteocpteunrestaannddaSredrsvifcoer-HoreieanltthedInAforrcmhiatteicotnurEex(cShOanAg)ef(oHr IsEea).mWlehsisleinHfoLr7mFatHioInR esxucphpaonrgtse,RietpirnehseernittsattihoenailnflSetaxtiebiTlirtaynsafnedr c(RomESpTle)xaitrychaistseocctuiarteedanwditShetrhveicRe-EoSriTenfuteldapAprrcohaicthec. tGurreap(hSQOLA)isfoarqsueearmy lleasnsgiunafgoermdeavtieolnopeexdchbaynFgaec, eitboinohketrhitasttphreovinidfleesxipbriolimtyisainngd tceocmhnpilqexuietsytaossoovceiractoemd ewtihthestheeisRsuEeSsT. fIunltahpisprpoaapcehr., GwreapexhpQlLoitisthaequuseeryoflaGngraupahgQe LdeavnedloHpeLd7bFyHFIaRcefbooroHkItEh;apt rpersoevnitdeasn parlogmoriisthinmg ttoecmhnaipquHeLs 7toFoHvIeRrcroemsoeutrhceessetoisasuGesr.apInhQthLisspchapemer,a,waendexcprleoaittetdhea upsroetooftyGperaipmhpQlLemaenndtaHtiLon7 oFfHtIhRe faoprprHoIaEc;hparnedsecnotmanpaarlegoitriwthimth atoRmEaSpTHfuLl 7apFpHroIRachre.sOouurrceexspteoriamGenrataplhrQesLulstcshienmdiac,aatendthcartetahteedcoampbrointoattyiopneoimf GplreampheQntLataionnd oHfLth7eFaHpIpRro-baacsheadnwdecbomAPpaIsrefoitr wHiItEh iasRpEerSfoTrfmulaanpt,pcrooastc-he.ffOecutriveex,psecraimlabenletaalnrdesfluelxtsibinleditcoamteetehtawt tehbeacnodmmbionbaitlieoncloiefnGtsrarepqhuQirLemanedntHs.L7 FHIR-based web APIs for HIE is performant, cost-effective, scalable and flexible to meet web and mobile clients requirements.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\G2SBSKM8\\Mukhiya et al. - 2019 - A GraphQL approach to Healthcare Information Excha.pdf},
  journal = {Procedia Computer Science},
  language = {en}
}

@article{muramSystematicReviewSoftware2017,
  title = {Systematic {{Review}} of {{Software Behavioral Model Consistency Checking}}},
  author = {ul Muram, Faiz and Tran, Huy and Zdun, Uwe},
  year = {2017},
  month = jun,
  volume = {50},
  pages = {1--39},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/3037755},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CXPHBZ7G\\Muram et al. - 2017 - Systematic Review of Software Behavioral Model Con.pdf},
  journal = {ACM Computing Surveys},
  language = {en},
  number = {2}
}

@misc{ObjectConstraintLanguage2020,
  title = {About the {{Object Constraint Language Specification Version}} 2.4},
  year = {2020},
  month = nov,
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZY947FE3\\Object Constraint Language 2.4.pdf},
  howpublished = {https://www.omg.org/spec/OCL}
}

@misc{objectmanagementgroupomgUnifiedModelingLanguage2017,
  title = {About the {{Unified Modeling Language Specification Version}} 2.5.1},
  author = {{Object Management Group (OMG)}},
  year = {2017},
  month = dec,
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WGDSNQQ7\\Unified Modeling Language, v2.5.1.pdf},
  howpublished = {https://www.omg.org/spec/UML}
}

@article{odellDebuggingMindsetUnderstanding2017,
  title = {The {{Debugging Mindset}}: {{Understanding}} the {{Psychology}} of {{Learning Strategies Leads}} to {{Effective Problem}}-{{Solving Skills}}.},
  author = {O'Dell, Devon H.},
  year = {2017},
  month = feb,
  volume = {15},
  pages = {71--90},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  issn = {1542-7730},
  doi = {10.1145/3055301.3068754},
  abstract = {Software developers spend 35-50 percent of their time validating and debugging software. The cost of debugging, testing, and verification is estimated to account for 50-75 percent of the total budget of software development projects, amounting to more than \$100 billion annually. While tools, languages, and environments have reduced the time spent on individual debugging tasks, they have not significantly reduced the total time spent debugging, nor the cost of doing so. Therefore, a hyperfocus on elimination of bugs during development is counterproductive; programmers should instead embrace debugging as an exercise in problem solving.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QS8HZVJW\\O'Dell - 2017 - The Debugging Mindset Understanding the Psycholog.pdf},
  journal = {Queue},
  number = {1}
}

@inproceedings{oechsleJAVAVISAutomaticProgram2002,
  title = {{{JAVAVIS}}: {{Automatic}} Program Visualization with Object and Sequence Diagrams Using the Java Debug Interface ({{JDI}})},
  booktitle = {Software Visualization},
  author = {Oechsle, Rainer and Schmitt, Thomas},
  editor = {Diehl, Stephan},
  year = {2002},
  pages = {176--190},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {The goal of the JAVAVIS system is to help students understand what is happening in a Java program during execution. The primary focus of the first release is on sequential Java programs, although there is some support for visualizing concurrent threads. The system uses the Java Debug Interface (JDI), so there are no modifications needed in the Java source code for the extraction of information. The system shows the dynamic behavior of a running program by displaying several object diagrams and a single sequence diagram. There is one object diagram for each active method on the call stack. All modifications in the diagrams are done by smooth transitions.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VRAQRZ7G\\Oechsle og Schmitt - JAVAVIS Automatic Program Visualization with Obje.pdf},
  isbn = {978-3-540-45875-3}
}

@book{olveczkyDesigningReliableDistributed2017,
  title = {Designing {{Reliable Distributed Systems}}},
  author = {{\"O}lveczky, Peter Csaba},
  year = {2017},
  publisher = {{Springer London}},
  address = {{London}},
  doi = {10.1007/978-1-4471-6687-0},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Q54TQ2GJ\\Ölveczky - 2017 - Designing Reliable Distributed Systems.pdf},
  isbn = {978-1-4471-6686-3 978-1-4471-6687-0},
  language = {en},
  series = {Undergraduate {{Topics}} in {{Computer Science}}}
}

@article{panachnavarreteEvaluatingModelDrivenDevelopment2018,
  title = {Evaluating {{Model}}-{{Driven Development Claims}} with Respect to {{Quality}}: {{A Family}} of {{Experiments}}},
  shorttitle = {Evaluating {{Model}}-{{Driven Development Claims}} with Respect to {{Quality}}},
  author = {Panach Navarrete, Jose Ignacio and Dieste, Oscar and Marin, Beatriz and Espana, Sergio and Vegas, Sira and Pastor, Oscar and Juristo, Natalia},
  year = {2018},
  issn = {0098-5589, 1939-3520, 2326-3881},
  doi = {10.1109/TSE.2018.2884706},
  abstract = {Context: There is a lack of empirical evidence on the differences between model-driven development (MDD), where code is automatically derived from conceptual models, and traditional software development method, where code is manually written. In our previous work, we compared both methods in a baseline experiment concluding that quality of the software developed following MDD was significantly better only for more complex problems (with more function points). Quality was measured through test cases run on a functional system. Objective: This paper reports six replications of the baseline to study the impact of problem complexity on software quality in the context of MDD. Method: We conducted replications of two types: strict replications and object replications. Strict replications were similar to the baseline, whereas we used more complex experimental objects (problems) in the object replications. Results: MDD yields better quality independently of problem complexity with a moderate effect size. This effect is bigger for problems that are more complex. Conclusions: Thanks to the bigger size of the sample after aggregating replications, we discovered an effect that the baseline had not revealed due to the small sample size. The baseline results hold, which suggests that MDD yields better quality for more complex problems.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KE4CUMAS\\Panach Navarrete et al. - 2018 - Evaluating Model-Driven Development Claims with re.pdf},
  journal = {IEEE Transactions on Software Engineering},
  language = {en}
}

@inproceedings{pangIEC61499Models2015,
  title = {Towards {{IEC}} 61499 Models of Computation in {{Ptolemy II}}},
  booktitle = {{{IECON}} 2015 - 41st {{Annual Conference}} of the {{IEEE Industrial Electronics Society}}},
  author = {Pang, Cheng and Dai, Wenbin and Vyatkin, Valeriy},
  year = {2015},
  month = nov,
  pages = {001988--001993},
  publisher = {{IEEE}},
  address = {{Yokohama}},
  doi = {10.1109/IECON.2015.7392392},
  abstract = {The prospects of cyber-physical systems (CPS) have been well disseminated and recognized in diverse industries. In industrial automation domain, continuous research on CPS technologies has been funded strategically and globally. One important research challenge in industrial CPS is the modelling of physical processes in continuous domains connected with control systems in discrete domains. Such co-modelling must leverage state-of-the-art standards and tools for practicality. One feasible combination is the IEC 61499 standard for event-driven control and the Ptolemy II platform for heterogeneous model composition. Furthermore, by implementing the computational models of IEC 61499 in Ptolemy II, the behavioural discrepancies of the same IEC 61499 application under different execution semantics can be analysed. As a foundation work towards these goals, this paper investigates the principles of modelling basic IEC 61499 elements using existing Ptolemy II structures. It is aimed to provide some initial insights for engineering industrial CPS based on IEC 61499 and Ptolemy II.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9US35MNH\\Pang et al. - 2015 - Towards IEC 61499 models of computation in Ptolemy.pdf},
  isbn = {978-1-4799-1762-4},
  language = {en}
}

@inproceedings{patelHeterogeneousBehavioralHierarchy2006,
  title = {Heterogeneous {{Behavioral Hierarchy}} for {{System Level Designs}}},
  booktitle = {Proceedings of the {{Design Automation}} \& {{Test}} in {{Europe Conference}}},
  author = {Patel, H.D. and Shukla, S.K. and Bergamaschi, R.A.},
  year = {2006},
  pages = {1--6},
  publisher = {{IEEE}},
  address = {{Munich, Germany}},
  doi = {10.1109/DATE.2006.243955},
  abstract = {Enhancing productivity for designing complex embedded systems requires system level design methodology and language support for capturing complex design in high level models. For an effective methodology, efficiency of simulation and a sound refinement based implementation path are also necessary. Although some of the recent system level design languages for system level abstractions, several essential ingredients are missing from these. We consider (i) explicit support for multiple models of computation (MoCs) or heterogeneity; (ii) the ability to build complex behaviors by hierarchically composing simpler behaviors; and (iii) hierarchical composition of behaviors that belong to distinct models of computation, as essential for successful SLDLs. These render an SLDL with modeling fidelity that exploits both heterogeneity and hierarchy and allows for simpler modeling and efficient simulation. One important requirement for such an SLDL should be that the simulation semantics be also compositional, and hence no flattening of hierarchically composed behaviors be needed for simulation. In this paper we show how we designed SystemC extensions to provide facilities for heterogeneous behavioral hierarchy, compositional simulation semantics, and implemented a simulation kernel which we show experimentally as up to 50\% more efficient than standard SystemC simulation.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KJIQXDE8\\Patel et al. - 2006 - Heterogeneous Behavioral Hierarchy for System Leve.pdf},
  isbn = {978-3-9810801-1-7},
  language = {en}
}

@inproceedings{pavlovicCompositionRefinementBehavioral2001,
  title = {Composition and Refinement of Behavioral Specifications},
  booktitle = {Proceedings 16th {{Annual International Conference}} on {{Automated Software Engineering}} ({{ASE}} 2001)},
  author = {Pavlovic, D. and Smith, D.R.},
  year = {2001},
  pages = {157--165},
  publisher = {{IEEE Comput. Soc}},
  address = {{San Diego, CA, USA}},
  doi = {10.1109/ASE.2001.989801},
  abstract = {This paper presents a mechanizable framework for specifying, developing, and reasoning about complex systems. The framework combines features from algebraic specifications, abstract state machines, and refinement calculus, all couched in a categorical setting. In particular, we show how to extend algebraic specifications to evolving specifications (especs) in such a way that composition and refinement operations extend to capture the dynamics of evolving, adaptive, and self-adaptive software development, while remaining efficiently computable. The framework is partially implemented in the Epoxi system.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TYI2CXGY\\Pavlovic og Smith - 2001 - Composition and refinement of behavioral specifica.pdf},
  isbn = {978-0-7695-1426-0},
  language = {en}
}

@article{ProblemThreads,
  title = {The Problem with Threads},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\DJXT7RSS\\EECS-2006-1.pdf}
}

@book{ptolemaeusSystemDesignModeling2014,
  title = {System Design, Modeling, and Simulation: Using {{Ptolemy II}}},
  shorttitle = {System Design, Modeling, and Simulation},
  editor = {Ptolemaeus, Claudius},
  year = {2014},
  edition = {1. ed., version 1.02},
  publisher = {{UC Berkeley EECS Dept}},
  address = {{Berkeley, Calif}},
  annotation = {OCLC: 935837595},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SYS73UYS\\Ptolemaeus - 2014 - System design, modeling, and simulation using Pto.pdf},
  isbn = {978-1-304-42106-7},
  language = {en}
}

@article{rabbiModelDrivenEngineering2018,
  title = {A Model Driven Engineering Approach for Heterogeneous Model Composition},
  author = {Rabbi, F. and Lamo, Y. and Kristensen, L.M.},
  year = {2018},
  volume = {880},
  pages = {198--221},
  doi = {10.1007/978-3-319-94764-8_9},
  document_type = {Conference Paper},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\LAIVE8I4\\Rabbi et al. - 2018 - A model driven engineering approach for heterogene.pdf},
  journal = {Communications in Computer and Information Science},
  source = {Scopus}
}

@inproceedings{reggioWhatAreUsed2013,
  title = {What Are the Used {{UML}} Diagrams? {{A}} Preliminary Survey},
  booktitle = {{{EESSMOD}}@{{MoDELS}}},
  author = {Reggio, G. and Leotta, M. and Ricca, F. and Clerissi, Diego},
  year = {2013},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\LVZ9WLIY\\Reggio et al. - What are the used UML diagrams A Preliminary Surv.pdf}
}

@incollection{rensinkExplicitStateModel2008,
  title = {Explicit State Model Checking for Graph Grammars},
  booktitle = {Concurrency, Graphs and Models: {{Essays}} Dedicated to Ugo Montanari on the Occasion of His 65th Birthday},
  author = {Rensink, Arend},
  editor = {Degano, Pierpaolo and De Nicola, Rocco and Meseguer, Jos{\'e}},
  year = {2008},
  pages = {114--132},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-68679-8₈},
  abstract = {In this paper we present the philosophy behind the GROOVE project, in which graph transformation is used as a modelling formalism on top of which a model checking approach to software verification is being built. We describe the basic formalism, the current state of the project, and (current and future) challenges.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\28I2YCWI\\Rensink - 2008 - Explicit state model checking for graph grammars.pdf},
  isbn = {978-3-540-68679-8}
}

@incollection{rensinkGROOVESimulatorTool2004,
  title = {The {{GROOVE Simulator}}: {{A Tool}} for {{State Space Generation}}},
  shorttitle = {The {{GROOVE Simulator}}},
  booktitle = {Applications of {{Graph Transformations}} with {{Industrial Relevance}}},
  author = {Rensink, Arend},
  editor = {Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Pfaltz, John L. and Nagl, Manfred and B{\"o}hlen, Boris},
  year = {2004},
  volume = {3062},
  pages = {479--485},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-25959-6_40},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\S44ZSPRX\\Rensink - 2004 - The GROOVE Simulator A Tool for State Space Gener.pdf},
  isbn = {978-3-540-22120-3 978-3-540-25959-6},
  language = {en}
}

@phdthesis{rinderle-maSchemaEvolutionProcess2004,
  title = {Schema Evolution in Process Management Systems.},
  author = {{Rinderle-Ma}, Stefanie},
  year = {2004},
  month = jan,
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TX2A5HIY\\Ulm og Dadam - Schema Evolution in Process Management Systems.pdf},
  school = {Universit\"at Ulm}
}

@incollection{riveraBehaviorTimeViewpoint2009,
  title = {Behavior, {{Time}} and {{Viewpoint Consistency}}: {{Three Challenges}} for {{MDE}}},
  shorttitle = {Behavior, {{Time}} and {{Viewpoint Consistency}}},
  booktitle = {Models in {{Software Engineering}}},
  author = {Rivera, Jos{\'e} Eduardo and Romero, Jos{\'e} Raul and Vallecillo, Antonio},
  editor = {Chaudron, Michel R. V.},
  year = {2009},
  volume = {5421},
  pages = {60--65},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-01648-6_7},
  abstract = {Although Model Driven Software Development (MDSD) is achieving significant progress, it is still far from becoming a real Engineering discipline. In fact, many of the difficult problems of the engineering of complex software systems are still unresolved, or simplistically addressed by many of the current MDSD approaches. In this position paper we outline three of the outstanding problems that we think MDSD should tackle in order to be useful in industrial environments.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Q9XGZBW3\\Rivera et al. - 2009 - Behavior, Time and Viewpoint Consistency Three Ch.pdf},
  isbn = {978-3-642-01647-9 978-3-642-01648-6},
  language = {en}
}

@inproceedings{riveraGraphicalApproachModeling2009,
  title = {A Graphical Approach for Modeling Time-Dependent Behavior of {{DSLs}}},
  booktitle = {2009 {{IEEE Symposium}} on {{Visual Languages}} and {{Human}}-{{Centric Computing}} ({{VL}}/{{HCC}})},
  author = {Rivera, Jose E. and Duran, Francisco and Vallecillo, Antonio},
  year = {2009},
  month = sep,
  pages = {51--55},
  publisher = {{IEEE}},
  address = {{Corvallis, OR, USA}},
  doi = {10.1109/VLHCC.2009.5295300},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KT4PWBFX\\Rivera et al. - 2009 - A graphical approach for modeling time-dependent b.pdf},
  isbn = {978-1-4244-4876-0}
}

@article{rodriguezCompositionMultilevelDomainSpecific,
  title = {Composition of {{Multilevel Domain}}-{{Specific Modelling Languages}}},
  author = {Rodr{\'i}guez, Alejandro and Mac{\'i}as, Fernando and Dur{\'a}n, Francisco and Rutle, Adrian and Wolter, Uwe},
  pages = {49},
  abstract = {Multilevel Modelling (MLM) approaches make it possible for designers and modellers to work with an unlimited number of abstraction levels to specify their domain-specific modelling languages (DSMLs). To fully exploit MLM techniques, we need powerful model composition operators. Indeed, the composition of DSMLs is becoming increasingly relevant to the modelling community either because some DSMLs may share commonalities that we want to make reusable, or because we want to facilitate interoperability between DSMLs. In this paper, we propose a composition mechanism for structure and behaviour of multilevel modelling hierarchies. Our approach facilitates the inclusion of additional features while keeping a clear separation of concerns that enhances modularity. We provide a formal semantics of the constructions based on category theory and graph transformations and show their use in practice on a case study.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\TTVYYSS8\\Rodríguez et al. - Composition of Multilevel Domain-Specific Modellin.pdf},
  language = {en}
}

@article{rodriguezExecutingMultilevelDomainSpecific2019,
  title = {Executing {{Multilevel Domain}}-{{Specific Models}} in {{Maude}}.},
  author = {Rodr{\'i}guez, Alejandro and Dur{\'a}n, Francisco and Rutle, Adrian and Kristensen, Lars Michael},
  year = {2019},
  volume = {18},
  pages = {4:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2019.18.2.a4},
  abstract = {Multilevel modelling (MLM) tackles the limitation in the number of abstraction levels present in traditional modelling approaches within the model-driven software engineering (MDSE) field. One way to specify the behaviour description of MLMs is by means of multilevel model transformations. In this paper, we propose an approach to achieve reusability and flexibility in specifying and executing multilevel model transformations. For this purpose, we rely on code-generation and the efficient rewriting logic mechanisms that Maude provides. As a proof of concept, we have developed an infrastructure which combines our MLM tool MultEcore, that facilitates definition of MLM hierarchies and transformations, with Maude, which performs the execution of the transformations on these hierarchies.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\IYT9KI4K\\Rodríguez et al. - 2019 - Executing Multilevel Domain-Specific Models in Mau.pdf},
  journal = {The Journal of Object Technology},
  language = {en},
  number = {2}
}

@inproceedings{rodriguezMultilevelModellingColoured2018,
  title = {Multilevel Modelling of Coloured Petri Nets},
  booktitle = {{{MODELS}} Workshops},
  author = {Rodr{\'i}guez, A. and Rutle, Adrian and Dur{\'a}n, F. and Kristensen, L. M. and Mac{\'i}as, Fernando},
  year = {2018},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\J3PC25J3\\Rodríguez et al. - Multilevel modelling of coloured Petri nets.pdf}
}

@book{roubtsovaBehaviorModelingFoundations2015,
  title = {Behavior {{Modeling}} -- {{Foundations}} and {{Applications}}},
  editor = {Roubtsova, Ella and McNeile, Ashley and Kindler, Ekkart and Gerth, Christian},
  year = {2015},
  volume = {6368},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-21912-7},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MRGRJNGJ\\Roubtsova et al. - 2015 - Behavior Modeling -- Foundations and Applications.pdf},
  isbn = {978-3-319-21911-0 978-3-319-21912-7},
  language = {en},
  series = {Lecture {{Notes}} in {{Computer Science}}}
}

@incollection{rutleDiagrammaticFormalisationMOFBased2009,
  title = {A {{Diagrammatic Formalisation}} of {{MOF}}-{{Based Modelling Languages}}},
  booktitle = {Objects, {{Components}}, {{Models}} and {{Patterns}}},
  author = {Rutle, Adrian and Rossini, Alessandro and Lamo, Yngve and Wolter, Uwe},
  editor = {Oriol, Manuel and Meyer, Bertrand},
  year = {2009},
  volume = {33},
  pages = {37--56},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-02571-6_4},
  abstract = {In Model-Driven Engineering (MDE) models are the primary artefacts of the software development process. The usage of these models have resulted in the introduction of a variety of modelling languages and frameworks. Many of these languages and frameworks are based on the Object Management Group's (OMG) Meta-Object Facility (MOF). In addition to their diagrammatic syntax, these languages use the Object Constraint Language to specify constraints that are difficult to specify diagrammatically. In this paper, we argue for a completely diagrammatic specification framework for MDE, where by diagrammatic we mean specification techniques which target graph-based structures. We introduce the Diagram Predicate Framework, which provides a formal diagrammatic approach to modelling based on category theory \textendash{} the mathematics of graph-based structures. The development of a generic and flexible formalisation of metamodelling is the main contribution of the paper. We illustrate our approach through the formalisation of the kernel of the Eclipse Modeling Framework.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9LHMTVMF\\Rutle et al. - 2009 - A Diagrammatic Formalisation of MOF-Based Modellin.pdf},
  isbn = {978-3-642-02570-9 978-3-642-02571-6},
  language = {en}
}

@phdthesis{rutleDiagramPredicateFramework2011,
  title = {Diagram {{Predicate Framework}}},
  shorttitle = {Bibliofile Klassikere \& Litter\ae re Likegyldigheter},
  author = {Rutle, Adrian},
  year = {2011},
  annotation = {OCLC: 772905668},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FCYFM7AH\\Schiøtz - 2010 - Bibliofile klassikere & litterære likegyldigheter.pdf;C\:\\Users\\Tim\\Zotero\\storage\\VVM6GH39\\fibred_semantics.pdf},
  language = {en},
  school = {University of Bergen}
}

@article{rutleFormalApproachSpecification2012,
  title = {A Formal Approach to the Specification and Transformation of Constraints in {{MDE}}},
  author = {Rutle, Adrian and Rossini, Alessandro and Lamo, Yngve and Wolter, Uwe},
  year = {2012},
  month = may,
  volume = {81},
  pages = {422--457},
  issn = {15678326},
  doi = {10.1016/j.jlap.2012.03.006},
  abstract = {This paper introduces a formal approach to constraint-aware model transformation which supports specifying constraints in the definition of transformation rules. These constraints are used to control which structure to create in the target model and which constraints to add to the created structure. The proposed approach is classified under heterogeneous, graphbased and out-place model transformations; and illustrated by applying it to a language translation. It is based on the Diagram Predicate Framework which provides a formalisation of (meta)modelling based on category theory and graph transformation. In particular, the proposed approach uses non-deleting transformation rules that are specified by a joined modelling language which is defined by relating the source and target languages. The relation between source and target languages is formalised by morphisms from their corresponding modelling formalisms into a joined modelling formalism. Furthermore, the application of transformation rules is formalised as a pushout construction and the final target model is obtained by a pullback construction.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HD3U8MQ3\\Rutle et al. - 2012 - A formal approach to the specification and transfo.pdf},
  journal = {The Journal of Logic and Algebraic Programming},
  language = {en},
  number = {4}
}

@inproceedings{rutleMetamodellingApproachBehavioural2012,
  title = {A Metamodelling Approach to Behavioural Modelling},
  booktitle = {Proceedings of the {{Fourth Workshop}} on {{Behaviour Modelling}} - {{Foundations}} and {{Applications}} - {{BM}}-{{FA}} '12},
  author = {Rutle, Adrian and MacCaull, Wendy and Wang, Hao and Lamo, Yngve},
  year = {2012},
  pages = {1--10},
  publisher = {{ACM Press}},
  address = {{Kgs. Lyngby, Denmark}},
  doi = {10.1145/2325276.2325281},
  abstract = {In this paper we propose a metamodelling approach to behavioural modelling. The approach combines diagrammatic modelling with formal foundations based on category theory and graph transformations. The static semantics of behavioural models is represented by instances of (meta)models, while their dynamic semantics is represented by transition systems. Transitions are described by coupled model transformations. To illustrate the approach, we present a running example of a workflow model for health services delivery.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\23VULTA6\\Rutle et al. - 2012 - A metamodelling approach to behavioural modelling.pdf},
  isbn = {978-1-4503-1187-8},
  language = {en}
}

@article{ruttenUniversalCoalgebraTheory2000,
  title = {Universal Coalgebra: A Theory of Systems},
  shorttitle = {Universal Coalgebra},
  author = {Rutten, J.J.M.M.},
  year = {2000},
  month = oct,
  volume = {249},
  pages = {3--80},
  issn = {03043975},
  doi = {10.1016/S0304-3975(00)00056-6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8CTBSM3G\\Rutten - 2000 - Universal coalgebra a theory of systems.pdf},
  journal = {Theoretical Computer Science},
  language = {en},
  number = {1}
}

@inproceedings{sarjoughianModelComposability2006,
  title = {Model {{Composability}}},
  booktitle = {Proceedings of the 2006 {{Winter Simulation Conference}}},
  author = {Sarjoughian, Hessam},
  year = {2006},
  month = dec,
  pages = {149--158},
  publisher = {{IEEE}},
  address = {{Monterey, CA, USA}},
  doi = {10.1109/WSC.2006.323047},
  abstract = {Composition of models is considered essential in developing heterogeneous complex systems and in particular simulation models capable of expressing a system's structure and behavior. This paper describes model composability concepts and approaches in terms of modeling formalisms. These composability approaches along with some of the key capabilities and challenges they pose are presented in the context of semiconductor supply chain manufacturing systems.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CZUYYPCF\\Sarjoughian - 2006 - Model Composability.pdf},
  isbn = {978-1-4244-0501-5 978-1-4244-0500-8},
  language = {en}
}

@inproceedings{schaferEnhancingDevelopmentConsistency2020,
  title = {Enhancing Development and Consistency of {{UML}} Models and Model Executions with {{USE}} Studio},
  booktitle = {Proceedings of the 23rd {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}: {{Companion Proceedings}}},
  author = {Sch{\"a}fer, Marcel and Gogolla, Martin},
  year = {2020},
  month = oct,
  pages = {1--5},
  publisher = {{ACM}},
  address = {{Virtual Event Canada}},
  doi = {10.1145/3417990.3422011},
  abstract = {The UML and OCL tool USE (UML-based Specification Environment) has been developed over more than one decade offering domain-specific languages for describing (1) UML class and statechart models, (2) OCL constraints for invariants (on classes and states) and pre- and postconditions (on operations and transitions), and (3) SOIL (Simple Ocl-like Imperative Language) command sequences for (3a) operation implementations and (3b) executions of model test cases. The three languages have been originally developed as independent textual languages intended for conventional editing. This contribution introduces a new integrated development environment for the three languages to give the developer projectional editing features. We discuss a number of advantages for model development in a developer interface called USE Studio1: (1) completion mechanisms for language syntax elements and already defined developer model elements, (2) structured, focused views on related language elements (e.g., one common view on all model associations), (3) consistency guarantees between the underlying model and model executions, and (4) basic common refactorings for the model and model executions.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\W62QIPWT\\Schäfer und Gogolla - 2020 - Enhancing development and consistency of UML model.pdf},
  isbn = {978-1-4503-8135-2},
  language = {en}
}

@article{schulzCategoricalFrameworkTransformation2011,
  title = {A Categorical Framework for the Transformation of Object-Oriented Systems: {{Models}} and Data},
  shorttitle = {A Categorical Framework for the Transformation of Object-Oriented Systems},
  author = {Schulz, Christoph and L{\"o}we, Michael and K{\"o}nig, Harald},
  year = {2011},
  month = mar,
  volume = {46},
  pages = {316--337},
  issn = {07477171},
  doi = {10.1016/j.jsc.2010.09.010},
  abstract = {Refactoring of information systems is hard, for two reasons. On the one hand, large databases exist which have to be adjusted. On the other hand, many programs access those data. Data and programs all have to be migrated in a consistent manner such that their semantics does not change. This paper addresses the data part of the problem and introduces a model for object-oriented structures, describing the schema level with classes, associations, and inheritance as well as the instance level with objects and links. Positive Horn formulas based on predicates are used to formulate constraints to be obeyed by the schema and instance level, in order to reflect object-oriented structures. Homomorphisms are used for the typing of the instance level as well as for the description of refactorings which specify the addition, folding, and unfolding of schema elements. A categorial framework is presented which allows us to derive instance migrations from schema transformations in such a way that instances of the old schema are automatically migrated into instances of the new schema. The natural use of the pullback functor for unfolding is followed by an initial semantics approach: Instance migration is completed with the help of a co-adjoint functor on arrow categories.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MI5VHBTG\\Schulz et al. - 2011 - A categorical framework for the transformation of .pdf},
  journal = {Journal of Symbolic Computation},
  language = {en},
  number = {3}
}

@phdthesis{schulzTransformationObjektorientierterSysteme2010,
  title = {{Transformation objektorientierter Systeme basierend auf algebraischen Graph-Transformationen}},
  author = {Schulz, Christoph},
  year = {2010},
  month = jun,
  abstract = {Since the beginning of software development, making existing software conformant to new demands has always been an important topic. The extension of software by new functionality is facilitated or even made possible by software refactoring: improving the structure of software without changing its behaviour in order to implement additional functionality more easily. Unfortunately, the transformation of object-oriented data and the transformation of object-oriented software is usually examined separately. This work focuses on the transformation of whole object-oriented systems, i. e. of programs, running program instantiations (processes), and associated data. In order to achieve this goal, first a conceptional model for an appropriate description of object-oriented systems is developed. This model is then formalised by a specification with predicates and positive Horn formulas. Analogously to graph transformations, system transformations are then modelled by spans of homomorphisms. The main result of this work is the canonical deduction of the migration of data, programs, and processes from the transformation of the underlying schema, such that the transformation of a whole system can be uniquely determined by the transformation of the schema only. The work is rounded off by the treatment of the composition of transformations and an outlook of possible model extensions.},
  collaborator = {Technische Universit{\"a}t Berlin and Technische Universit{\"a}t Berlin and Ehrig, Hartmut},
  copyright = {Terms of German Copyright Law},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9U99P9K9\\Schulz - 2010 - Transformation objektorientierter Systeme basieren.pdf},
  keywords = {004 Datenverarbeitung; Informatik,Evolution,Migration,Refactoring,Software,Transformation},
  language = {de},
  school = {Technische Universit\"at Berlin}
}

@book{seidlUMLClassroom2015,
  title = {{{UML}} @ {{Classroom}}},
  author = {Seidl, Martina and Scholz, Marion and Huemer, Christian and Kappel, Gerti},
  year = {2015},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-12742-2},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\V6JY42EY\\Seidl et al. - 2015 - UML @ Classroom.pdf},
  isbn = {978-3-319-12741-5 978-3-319-12742-2},
  language = {en},
  series = {Undergraduate {{Topics}} in {{Computer Science}}}
}

@article{seshiaConcurrentStateMachines,
  title = {Concurrent State Machines and Composition},
  author = {Seshia, Sanjit A},
  pages = {11},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\244DUI6G\\lecture_08.pdf;C\:\\Users\\Tim\\Zotero\\storage\\5YVZLCUY\\Seshia - Introduction to Embedded Systems.pdf},
  language = {en}
}

@inproceedings{simkoTheoryCyberphysicalSystems2014,
  title = {Towards a Theory for Cyber-Physical Systems Modeling},
  author = {Simko, G. and Levendovszky, T. and Maroti, M. and Sztipanovits, J.},
  year = {2014},
  pages = {56--61},
  doi = {10.1145/2593458.2593463},
  document_type = {Conference Paper},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WDQ6ABAP\\Zhou et al. - 2014 - Modeling methods for dynamic behaviors of cyber-ph.pdf},
  series = {Proceedings of the 4th {{ACM Workshop}} on {{Design}}, {{Modeling}} and {{Evaluation}} of {{Cyber Physical Systems}}, {{CyPhy}} 2014},
  source = {Scopus}
}

@inproceedings{sinhaBehavioralModelComposition2002,
  title = {Behavioral Model Composition in Simulation-Based Design},
  booktitle = {Proceedings 35th {{Annual Simulation Symposium}}. {{SS}} 2002},
  author = {Sinha, R. and Paredis, C.J.J. and Khosla, P.K.},
  year = {2002},
  pages = {308--315},
  publisher = {{IEEE Comput. Soc}},
  address = {{San Deigo, CA, USA}},
  doi = {10.1109/SIMSYM.2002.1000168},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\4R9SKJ2E\\Sinha et al. - 2002 - Behavioral model composition in simulation-based d.pdf},
  isbn = {978-0-7695-1552-6},
  language = {en}
}

@article{soekenVerifyingDynamicAspects2011,
  title = {Verifying Dynamic Aspects of {{UML}} Models},
  author = {Soeken, M. and Wille, R. and Drechsler, R.},
  year = {2011},
  pages = {1--6},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\NYYLH6YP\\Soeken et al. - Verifying Dynamic Aspects of UML Models.pdf},
  journal = {2011 Design, Automation \& Test in Europe}
}

@article{soukainaModelDrivenEngineering2018,
  title = {Model {{Driven Engineering}} ({{MDE}}) {{Tools}}: {{A Survey}}},
  shorttitle = {Model {{Driven Engineering}} ({{MDE}}) {{Tools}}},
  author = {Soukaina, Moujtahid},
  year = {2018},
  volume = {3},
  pages = {29},
  issn = {2578-8345},
  doi = {10.11648/j.ajset.20180302.11},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\E4Q73P6G\\Soukaina - 2018 - Model Driven Engineering (MDE) Tools A Survey.pdf},
  journal = {American Journal of Science, Engineering and Technology},
  language = {en},
  number = {2}
}

@incollection{spanoudakisINCONSISTENCYMANAGEMENTSOFTWARE2001,
  title = {{{INCONSISTENCY MANAGEMENT IN SOFTWARE ENGINEERING}}: {{SURVEY AND OPEN RESEARCH ISSUES}}},
  shorttitle = {{{INCONSISTENCY MANAGEMENT IN SOFTWARE ENGINEERING}}},
  author = {Spanoudakis, George and Zisman, Andrea},
  year = {2001},
  month = dec,
  pages = {329--380},
  doi = {10.1142/9789812389718_0015},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\BFAXUP5C\\Spanoudakis og Zisman - 2001 - INCONSISTENCY MANAGEMENT IN SOFTWARE ENGINEERING .pdf}
}

@inproceedings{stevensSoundOptimalFlexible2018,
  title = {Towards Sound, Optimal, and Flexible Building from Megamodels},
  booktitle = {Proceedings of the 21th {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}},
  author = {Stevens, Perdita},
  year = {2018},
  month = oct,
  pages = {301--311},
  publisher = {{ACM}},
  address = {{Copenhagen Denmark}},
  doi = {10.1145/3239372.3239378},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\WPXHYEPI\\Stevens - 2018 - Towards sound, optimal, and flexible building from.pdf},
  isbn = {978-1-4503-4949-9},
  language = {en}
}

@article{stunkelComprehensiveSystemsFormal2021,
  title = {Comprehensive {{Systems}}: {{A}} Formal Foundation for {{Multi}}-{{Model Consistency Management}}},
  author = {St{\"u}nkel, Patrick and K{\"o}nig, Harald and Lamo, Yngve and Rutle, Adrian},
  year = {2021},
  pages = {48},
  abstract = {Model management is a central activity in Software Engineering. The most challenging aspect of model management is to keep inter-related models consistent with each other while they evolve. As a consequence, there is a lot of scientific activity in this area, which has produced an extensive body of knowledge, methods, results and tools. The majority of these approaches, however, are limited to a binary inter-model relations; i.e. the synchronisation of exactly two models. Yet, not every multi-ary relation can be factored into a family of binary relations.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ZHD6FDGG\\Stünkel et al. - Comprehensive Systems A formal foundation for Mul.pdf},
  language = {en}
}

@phdthesis{stunkelConsistencyInterRelatedSoftware,
  title = {Consistency of {{Inter}}-{{Related Software Models}}},
  author = {St{\"u}nkel, Patrick},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\D84M6EV8\\Stünkel - Consistency of Inter-Related Software Models.pdf},
  language = {en}
}

@article{stunkelGraphQLFederationModelBased2020,
  title = {{{GraphQL Federation}}: {{A Model}}-{{Based Approach}}.},
  shorttitle = {{{GraphQL Federation}}},
  author = {St{\"u}nkel, Patrick and {von Bargen}, Ole and Rutle, Adrian and Lamo, Yngve},
  year = {2020},
  volume = {19},
  pages = {18:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2020.19.2.a18},
  abstract = {The Graph Query Language (GraphQL) is a framework for developing Web Services, which works on the domain model level rather than the functions. While the declarative nature of this framework has already attracted the interest of practitioners in both academia and industry, it still lacks integration capabilities. This shortcoming has been recognized in the industry; there exists a first tool creating a federation\textemdash a virtual integrated system\textemdash on top of instrumented systems. Being relatively new, it suffers from a few practical and conceptual shortcomings, such as consolidation of (conflicting) schemas and identification of multiple types. In this paper, we will analyze the federation challenge and propose a solution utilizing multi-view modeling and domain specific modeling. Our approach is accompanied by a proof-of-concept implementation and provides a model-based presentation of the GraphQL framework.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\KMQZQ7MJ\\Stünkel et al. - 2020 - GraphQL Federation A Model-Based Approach..pdf;C\:\\Users\\Tim\\Zotero\\storage\\SX3N852Z\\thesis_Integration_of_Web_Services_and_their_data_models_with_special_regard_to_GraphQL.pdf},
  journal = {The Journal of Object Technology},
  language = {en},
  number = {2}
}

@inproceedings{stunkelMultimodelCorrespondenceIntermodel2018,
  title = {Multimodel Correspondence through Inter-Model Constraints},
  booktitle = {Conference {{Companion}} of the 2nd {{International Conference}} on {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}} - {{Programming}}'18 {{Companion}}},
  author = {St{\"u}nkel, Patrick and K{\"o}nig, Harald and Lamo, Yngve and Rutle, Adrian},
  year = {2018},
  pages = {9--17},
  publisher = {{ACM Press}},
  address = {{Nice, France}},
  doi = {10.1145/3191697.3191715},
  abstract = {The synchronisation of n {$\geq$} 2 heterogenously typed models requires a thorough understanding of global consistency rules. After having related these models by determining identical entities in them, we express the global rules in terms of diagrammatic predicates imposed on a comprehensive metamodel, which integrates the structural properties of all involved model spaces. If the global rules are violated, a possible subsequent consistency restoration can make use of formal descriptions for the verification of these rules.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\D7LKM7CP\\Stünkel et al. - 2018 - Multimodel correspondence through inter-model cons.pdf},
  isbn = {978-1-4503-5513-1},
  language = {en}
}

@article{stunkelMultiModelEvolutionModel2021,
  title = {Multi-{{Model Evolution}} through {{Model Repair}}.},
  author = {St{\"u}nkel, Patrick and K{\"o}nig, Harald and Rutle, Adrian and Lamo, Yngve},
  year = {2021},
  volume = {20},
  pages = {1:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2021.20.1.a2},
  abstract = {Design and development of complex software systems usually comprises multiple inter-related models, i.e. abstract representations of certain aspects of the underlying system. The relations between these models induce global consistency conditions which the models collectively must fulfill. At the same time, these models are subject to frequent changes, and as a result, maintaining their global consistency over time becomes an important issue in model management in general and Model-Driven Software Engineering in particular.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\ST5UJAHU\\Stünkel et al. - 2021 - Multi-Model Evolution through Model Repair..pdf},
  journal = {The Journal of Object Technology},
  language = {en},
  number = {1}
}

@incollection{stunkelMultipleModelSynchronization2020,
  title = {Towards {{Multiple Model Synchronization}} with {{Comprehensive Systems}}},
  booktitle = {Fundamental {{Approaches}} to {{Software Engineering}}},
  author = {St{\"u}nkel, Patrick and K{\"o}nig, Harald and Lamo, Yngve and Rutle, Adrian},
  editor = {Wehrheim, Heike and Cabot, Jordi},
  year = {2020},
  volume = {12076},
  pages = {335--356},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-45234-6_17},
  abstract = {Model management is a central activity in Software Engineering. The most challenging aspect of model management is to keep models consistent with each other while they evolve. As a consequence, there has been increasing activity in this area, which has produced a number of approaches to address this synchronization challenge. The majority of these approaches, however, is limited to a binary setting; i.e. the synchronization of exactly two models with each other. A recent Dagstuhl seminar on multidirectional transformations made it clear that there is a need for further investigations in the domain of general multiple model synchronization simply because not every multiary consistency relation can be factored into binary ones. However, with the help of an auxiliary artifact, which provides a global view over all models, multiary synchronization can be achieved by existing binary model synchronization means. In this paper, we propose a novel comprehensive system construction to produce such an artifact using the same underlying base modelling language as the one used to define the models. Our approach is based on the definition of partial commonalities among a set of aligned models. Comprehensive systems can be shown to generalize the underlying categories of graph diagrams and triple graph grammars and can efficiently be implemented in existing tools.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\3W8MLTG9\\summary.pdf;C\:\\Users\\Tim\\Zotero\\storage\\V2DFWV9E\\extended.pdf;C\:\\Users\\Tim\\Zotero\\storage\\V8YMPGEA\\Stünkel et al. - 2020 - Towards Multiple Model Synchronization with Compre.pdf},
  isbn = {978-3-030-45233-9 978-3-030-45234-6},
  language = {en}
}

@book{taylorSoftwareArchitectureFoundations2009,
  title = {Software Architecture: {{Foundations}}, Theory, and Practice},
  author = {Taylor, R. N. and Medvidovic, N. and Dashofy, E. M.},
  year = {2009},
  publisher = {{Wiley Publishing}},
  abstract = {Software architecture is foundational to the development of large, practical software-intensive applications. This brand-new text covers all facets of software architecture and how it serves as the intellectual centerpiece of software development and evolution. Critically, this text focuses on supporting creation of real implemented systems. Hence the text details not only modeling techniques, but design, implementation, deployment, and system adaptation \textendash{} as well as a host of other topics \textendash{} putting the elements in context and comparing and contrasting them with one another. Rather than focusing on one method, notation, tool, or process, this new text/reference widely surveys software architecture techniques, enabling the instructor and practitioner to choose the right tool for the job at hand. Software Architecture is intended for upper-division undergraduate and graduate courses in software architecture, software design, component-based software engineering, and distributed systems; the text may also be used in introductory as well as advanced software engineering courses.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\I8K664GI\\Software Architecture Foundations, Theory, and Practice by Richard N. Taylor Nenad Medvidovic Eric Dashofy.pdf},
  isbn = {0-470-16774-2}
}

@article{thierry-miegUMLBehavioralConsistency2008,
  title = {{{UML}} Behavioral Consistency Checking Using Instantiable {{Petri}} Nets},
  author = {{Thierry-Mieg}, Yann and Hillah, Lom-Messan},
  year = {2008},
  month = oct,
  volume = {4},
  pages = {293--300},
  issn = {1614-5054},
  doi = {10.1007/s11334-008-0065-0},
  abstract = {Model-driven engineering (MDE) development methods are gaining increasing attention from industry. In MDE, the model is the primary artifact and serves several goals, including code generation, requirements traceability, and model-based testing. MDE thus enables cost-effective building of models versus direct coding of an application. Thus model-based formal verification of behavioral consistency is desirable as it helps improve model quality. Our approach is based on translation of a UML model to instantiable Petri nets (IPN). This formalism is based on the semantics of Petri nets, but introduces the concepts of type and instance. This allows one to accurately capture these concepts in UML models. IPN support hierarchical descriptions natively, and use the notion of transition synchronization for composition of behaviors. This is a general and powerful mechanism borrowed from process algebra. We show that IPN allow one to adequately address the challenges of translation from UML for analysis purposes. The approach has been implemented and experimental results are presented.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JGQ7D7US\\Thierry-Mieg og Hillah - 2008 - UML behavioral consistency checking using instanti.pdf},
  journal = {Innovations in Systems and Software Engineering},
  number = {3}
}

@article{torreHowConsistencyHandled2018,
  title = {How Consistency Is Handled in {{Model Driven Software Engineering}} and {{UML}}: A Survey of Experts in Academia and Industry},
  author = {Torre, Damiano and Genero, Marcela and Labiche, Yvan and Elaasar, Maged},
  year = {2018},
  pages = {37},
  abstract = {Model Driven Software Engineering (MDSE) is an established approach for developing complex software systems. The Unified Modelling Language (UML) is one of the most used model languages for applying the MDSE approach. UML has 14 diagram types that describe different perspectives of one software system under development. These diagrams are strongly dependent on each other, and must be consistent with one another. The main objectives of this paper are: (1) to survey the diffusion and relevance of model consistency issues with experts, in order to understand model consistency in the MDSE/UML contexts; and more importantly, (2) to validate a set of 116 UML consistency rules from the literature, so as to identify the rules that should always be enforced. We conducted a personal opinion survey with 106 MDSE experts from academia and industry, by means of an online questionnaire, from May to June 2016. The survey results describe a detailed overview of how the topic of MDSE/UML consistency is addressed in academia and industry. In addition, this survey identified a set of 52 out of 116 UML consistency rules which should always be checked in every UML model. This subset of 52 rules could be: (a) considered to be added to the UML standard, (b) used as a reference to researchers who study UML/MDSE, (c) used as a practical example for teaching purposes.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\FVMI2Z7S\\Torre et al. - 2018 - How consistency is handled in Model Driven Softwar.pdf},
  language = {en}
}

@article{torresSystematicLiteratureReview2020,
  title = {A Systematic Literature Review of Cross-Domain Model Consistency Checking by Model Management Tools},
  author = {Torres, Weslley and {van den Brand}, Mark G. J. and Serebrenik, Alexander},
  year = {2020},
  month = oct,
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-020-00834-1},
  abstract = {Objective The goal of this study is to identify gaps and challenges related to cross-domain model management focusing on consistency checking. Method We conducted a systematic literature review. We used the keyword-based search on Google Scholar, and we identified 618 potentially relevant studies; after applying inclusion and exclusion criteria, 96 papers were selected for further analysis. Results The main findings/contributions are: (i) a list of available tools used to support model management; (ii) 40\% of the tools can provide consistency checking on models of different domains and 25\% on models of the same domain, and 35\% do not provide any consistency checking; (iii) available strategies to keep the consistency between models of different domains are not mature enough; (iv) most of the tools that provide consistency checking on models of different domains can only capture up to two inconsistency types; (v) the main challenges associated with tools that manage models on different domains are related to interoperability between tools and the consistency maintenance. Conclusion The results presented in this study can be used to guide new research on maintaining the consistency between models of different domains. Example of further research is to investigate how to capture the Behavioral and Refinement inconsistency types. This study also indicates that the tools should be improved in order to address, for example, more kinds of consistency check.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\D6E9PNJD\\Torres et al. - 2020 - A systematic literature review of cross-domain mod.pdf},
  journal = {Software and Systems Modeling},
  language = {en}
}

@article{torreSystematicIdentificationConsistency2018,
  title = {A Systematic Identification of Consistency Rules for {{UML}} Diagrams},
  author = {Torre, Damiano and Labiche, Yvan and Genero, Marcela and Elaasar, Maged},
  year = {2018},
  month = oct,
  volume = {144},
  pages = {121--142},
  issn = {01641212},
  doi = {10.1016/j.jss.2018.06.029},
  abstract = {UML diagrams describe different views of one piece of software. These diagrams strongly depend on each other and must therefore be consistent with one another, since inconsistencies between diagrams may be a source of faults during software development activities that rely on these diagrams. It is therefore paramount that consistency rules be defined and that inconsistencies be detected, analyzed and fixed. The relevant literature shows that authors typically define their own UML consistency rules, sometimes defining the same rules and sometimes defining rules that are already in the UML standard. The reason might be that no consolidated set of rules that are deemed relevant by authors can be found to date. The aim of our research is to provide a consolidated set of UML consistency rules and obtain a detailed overview of the current research in this area. We therefore followed a systematic procedure in order to collect and analyze UML consistency rules. We then consolidated a set of 116 UML consistency rules (avoiding redundant definitions or definitions already in the UML standard) that can be used as an important reference for UML-based software development activities, for teaching UML-based software development, and for further research.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VAC8GTGX\\Torre et al. - 2018 - A systematic identification of consistency rules f.pdf},
  journal = {Journal of Systems and Software},
  language = {en}
}

@inproceedings{torreUMLConsistencyRules2014,
  title = {{{UML}} Consistency Rules: A Systematic Mapping Study},
  shorttitle = {{{UML}} Consistency Rules},
  booktitle = {Proceedings of the 18th {{International Conference}} on {{Evaluation}} and {{Assessment}} in {{Software Engineering}} - {{EASE}} '14},
  author = {Torre, Damiano and Labiche, Yvan and Genero, Marcela},
  year = {2014},
  pages = {1--10},
  publisher = {{ACM Press}},
  address = {{London, England, United Kingdom}},
  doi = {10.1145/2601248.2601292},
  abstract = {Objective: The aim of this article is to deliver a comprehensive summary of UML consistency rules as they are described in the literature to date to obtain an extensive and detailed overview of the current research in this area. Method: We performed a Systematic Mapping Study by following well-known guidelines. We selected 95 primary studies from a search with seven search engines performed in December 2012. Results: Different results are worth mentioning. First it appears that researchers tend to discuss very similar consistency rules, over and over again. Most rules are horizontal (98.10\%) and syntactic (88.21\%). The most used diagrams are the class diagram (71.58\%), the sequence diagram (47.37\%) and the state machine diagram (42.11\%). Conclusion: The fact that many rules are duplicated in primary studies confirms the need for a well-accepted list of consistency rules. This paper is a first step in this direction. Results indicate that much more work is needed to develop consistency rules for all 14 UML diagrams, in all dimensions of consistency (e.g., semantic and syntactic on the one hand, horizontal, vertical and evolution on the other hand).},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\QM8ZPKFS\\Torre et al. - 2014 - UML consistency rules a systematic mapping study.pdf},
  isbn = {978-1-4503-2476-2},
  language = {en}
}

@article{tripakisModularFormalSemantics2013,
  title = {A Modular Formal Semantics for {{Ptolemy}}},
  author = {Tripakis, Stavros and Stergiou, Christos and Shaver, Chris and Lee, Edward A.},
  year = {2013},
  month = aug,
  volume = {23},
  pages = {834--881},
  issn = {0960-1295, 1469-8072},
  doi = {10.1017/S0960129512000278},
  abstract = {Ptolemy               \textdaggerdbl{}               is an open-source and extensible modelling and simulation framework. It offers heterogeneous modeling capabilities by allowing different models of computation, both untimed and timed, to be composed hierarchically in an arbitrary fashion. This paper proposes a formal semantics for Ptolemy that is modular in the sense that atomic actors and their compositions are treated in a unified way. In particular, all actors conform to an executable interface that contains four functions: fire (produce outputs given current state and inputs); postfire (update state instantaneously); deadline (how much time the actor is willing to let elapse); and time-update (update the state with the passage of time). Composite actors are obtained using composition operators that in Ptolemy are called directors. Different directors realise different models of computation. In this paper, we formally define the directors for the following models of computation: synchronous- reactive, discrete event, continuous time, process networks and modal models.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\UA2Z6Y8R\\Tripakis et al. - 2013 - A modular formal semantics for Ptolemy.pdf},
  journal = {Mathematical Structures in Computer Science},
  language = {en},
  number = {4}
}

@incollection{trollmannExtendingModelModel2015,
  title = {Extending {{Model}} to {{Model Transformation Results}} from {{Triple Graph Grammars}} to {{Multiple Models}}},
  booktitle = {Theory and {{Practice}} of {{Model Transformations}}},
  author = {Trollmann, Frank and Albayrak, Sahin},
  editor = {Kolovos, Dimitris and Wimmer, Manuel},
  year = {2015},
  volume = {9152},
  pages = {214--229},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-21155-8_16},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\CYDAERIW\\Kolovos und Wimmer - 2015 - Theory and Practice of Model Transformations 8th .pdf},
  isbn = {978-3-319-21154-1 978-3-319-21155-8}
}

@incollection{vanderstraetenChallengesModelDrivenSoftware2009,
  title = {Challenges in {{Model}}-{{Driven Software Engineering}}},
  booktitle = {Models in {{Software Engineering}}},
  author = {Van Der Straeten, Ragnhild and Mens, Tom and Van Baelen, Stefan},
  editor = {Chaudron, Michel R. V.},
  year = {2009},
  volume = {5421},
  pages = {35--47},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-01648-6_4},
  abstract = {After more than a decade of research in Model-Driven Engineering (MDE), the state-of-the-art and the state-of-the-practice in MDE has significantly progressed. Therefore, during this workshop we raised the question of how to proceed next, and we identified a number of future challenges in the field of MDE. The objective of the workshop was to provide a forum for discussing the future of MDE research and practice. Seven presenters shared their vision on the future challenges in the field of MDE. Four breakout groups discussed scalability, consistency and co-evolution, formal foundations, and industrial adoption, respectively. These themes were identified as major categories of challenges by the participants. This report summarises the different presentations, the MDE challenges identified by the workshop participants, and the discussions of the breakout groups.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\JN2ZABGX\\Van Der Straeten et al. - 2009 - Challenges in Model-Driven Software Engineering.pdf},
  isbn = {978-3-642-01647-9 978-3-642-01648-6},
  language = {en}
}

@inproceedings{varroFormalSemanticsUML2002,
  title = {A Formal Semantics of {{UML}} Statecharts by Model Transition Systems},
  booktitle = {Graph Transformation},
  author = {Varr{\'o}, D{\'a}niel},
  editor = {Corradini, Andrea and Ehrig, Hartmut and Kreowski, Hans -J{\"o}rg and Rozenberg, Grzegorz},
  year = {2002},
  pages = {378--392},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {UML Statecharts are well-known visual means to capture the dynamic behavior of reactive systems in the object-oriented design methodology. Since the UML standard only contains an informal description on how to execute such statemachines mathematically precise semantic frameworks are required for an automated analysis. The current paper presents a formal semantics for UML statecharts based on a combination of metamodeling and graph transformation that is (i) simultaneously visual and precise, and (ii) clearly separates derived static concepts (like priorities, conflicts, etc.) from their dynamic interpretation thus scaling up well for different statechart variants (with, e.g., various priority strategies) and potential future changes in the standard.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VT92IEES\\Varro - A Formal Semantics of UML Statecharts by Model Tra.pdf},
  isbn = {978-3-540-45832-6}
}

@article{voelterDesigningImplementingUsing,
  title = {Designing, {{Implementing}} and {{Using Domain}}-{{Specific Languages}}},
  author = {Voelter, Markus},
  pages = {560},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\SCVC5FJC\\Voelter - Designing, Implementing and Using Domain-Speciﬁc L.pdf},
  language = {en}
}

@book{walickiIntroductionMathematicalLogic2017,
  title = {Introduction to Mathematical Logic},
  author = {Walicki, Micha{\l}},
  year = {2017},
  edition = {Extended edition},
  publisher = {{World Scientific}},
  address = {{New Jersey}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\8SAA8CWP\\Walicki - 2017 - Introduction to mathematical logic.pdf},
  isbn = {978-981-4719-95-7 978-981-4719-96-4},
  keywords = {Logic; Symbolic and mathematical},
  language = {en},
  lccn = {QA9 .W334 2017}
}

@phdthesis{wangCorrectModellingModel2016,
  title = {Towards {{Correct Modelling}} and {{Model Transformation}} in {{DPF}}},
  author = {Wang, Xiaoliang},
  year = {2016},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\INILDF3I\\dr-thesis-2016-Xiaoliang-Wang.pdf}
}

@article{warwickIntegratingHeterogeneousModeling2017,
  title = {Integrating Heterogeneous Modeling Frameworks Using the {{DREAMIT}} Workspace},
  author = {Warwick, W. and Walsh, M. and Rodgers, S. and Lebiere, C.},
  year = {2017},
  volume = {481},
  pages = {267--278},
  doi = {10.1007/978-3-319-41627-4_24},
  document_type = {Conference Paper},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\T47PRQEL\\Duffy - 2017 - Advances in Applied Digital Human Modeling and Sim.pdf},
  journal = {Advances in Intelligent Systems and Computing},
  source = {Scopus}
}

@incollection{weidlichICoPFrameworkIdentification2010,
  title = {The {{ICoP Framework}}: {{Identification}} of {{Correspondences}} between {{Process Models}}},
  shorttitle = {The {{ICoP Framework}}},
  booktitle = {Active {{Flow}} and {{Combustion Control}} 2018},
  author = {Weidlich, Matthias and Dijkman, Remco and Mendling, Jan},
  editor = {King, Rudibert},
  year = {2010},
  volume = {141},
  pages = {483--498},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-642-13094-6_37},
  abstract = {Business process models can be compared, for example, to determine their consistency. Any comparison between process models relies on a mapping that identifies which activity in one model corresponds to which activity in another. Tools that generate such mappings are called matchers. This paper presents the ICoP framework, which can be used to develop such matchers. It consists of an architecture and re-usable matcher components. The framework enables the creation of matchers from the re-usable components and, if desired, newly developed components. It focuses on matchers that also detect complex correspondences between groups of activities, where existing matchers focus on 1:1 correspondences. We evaluate the framework by applying it to find matches in process models from practice. We show that the framework can be used to develop matchers in a flexible and adaptable manner and that the resulting matchers can identify a significant number of complex correspondences.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\MNWNHZ86\\Weidlich et al. - 2010 - The ICoP Framework Identification of Corresponden.pdf},
  isbn = {978-3-319-98176-5 978-3-319-98177-2},
  language = {en}
}

@incollection{whittleMATAUnifiedApproach2009,
  title = {{{MATA}}: {{A Unified Approach}} for {{Composing UML Aspect Models Based}} on {{Graph Transformation}}},
  shorttitle = {{{MATA}}},
  booktitle = {Transactions on {{Aspect}}-{{Oriented Software Development VI}}},
  author = {Whittle, Jon and Jayaraman, Praveen and Elkhodary, Ahmed and Moreira, Ana and Ara{\'u}jo, Jo{\~a}o},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Katz, Shmuel and Ossher, Harold and France, Robert and J{\'e}z{\'e}quel, Jean-Marc},
  year = {2009},
  volume = {5560},
  pages = {191--237},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-03764-1_6},
  abstract = {This paper describes MATA (Modeling Aspects Using a Transformation Approach), a UML aspect-oriented modeling (AOM) technique that uses graph transformations to specify and compose aspects. Graph transformations provide a unified approach for aspect modeling in that the methods presented here can be applied to any modeling language with a well-defined metamodel. This paper, however, focuses on UML class diagrams, sequence diagrams and state diagrams. MATA takes a different approach to AOM since there are no explicit joinpoints. Rather, any model element can be a joinpoint, and composition is a special case of model transformation. The graph transformation execution engine, AGG, is used in MATA to execute model compositions, and critical pair analysis is used to automatically detect structural interactions between different aspect models. MATA has been applied to a number of realistic case studies and is supported by a tool built on top of IBM Rational Software Modeler.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\J3B78RAR\\Whittle et al. - 2009 - MATA A Unified Approach for Composing UML Aspect .pdf},
  isbn = {978-3-642-03763-4 978-3-642-03764-1},
  language = {en}
}

@article{whittleStatePracticeModelDriven2014,
  title = {The {{State}} of {{Practice}} in {{Model}}-{{Driven Engineering}}},
  author = {Whittle, Jon and Hutchinson, John and Rouncefield, Mark},
  year = {2014},
  month = may,
  volume = {31},
  pages = {79--85},
  issn = {0740-7459, 1937-4194},
  doi = {10.1109/MS.2013.65},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\L7GZHSG4\\Whittle et al. - 2014 - The State of Practice in Model-Driven Engineering.pdf},
  journal = {IEEE Software},
  language = {en},
  number = {3}
}

@incollection{winskelCategoryTheoryModels1986,
  title = {Category Theory and Models for Parallel Computation},
  booktitle = {Category {{Theory}} and {{Computer Programming}}},
  author = {Winskel, Glynn},
  editor = {Goos, G. and Hartmanis, J. and Barstow, D. and Brauer, W. and Brinch Hansen, P. and Gries, D. and Luckham, D. and Moler, C. and Pnueli, A. and Seegm{\"u}ller, G. and Stoer, J. and Wirth, N. and Pitt, David and Abramsky, Samson and Poign{\'e}, Axel and Rydeheard, David},
  year = {1986},
  volume = {240},
  pages = {266--281},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-17162-2_128},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\GR3FJUJU\\Winskel - 1986 - Category theory and models for parallel computatio.pdf},
  isbn = {978-3-540-17162-1 978-3-540-47213-1},
  language = {en}
}

@article{winskelModelsConcurrency1993,
  title = {Models for {{Concurrency}}},
  author = {Winskel, Glynn and Nielsen, Mogens},
  year = {1993},
  month = nov,
  volume = {22},
  issn = {2245-9316, 0105-8517},
  doi = {10.7146/dpb.v22i463.6936},
  abstract = {{$<$}p{$>$}Revised version of DAIMI PB-429{$<$}/p{$><$}p{$>~<$}/p{$><$}p{$>$}This is, we believe, the final version of a chapter for the Handbook of Logic and the Foundations of Computer Science, vol. IV, Oxford University Press.{$<$}/p{$><$}p{$>$}It surveys a range of models for parallel computation to include interleaving models like transition systems, synchronisation trees and languages (often called Hoare traces in this context), and models like Petri nets, asynchronous transition systems, event structures, pomsets and Mazurkiewicz traces where concurrency is represented more explicitly by a form of causal independence.{$<$}/p{$><$}p{$>$}The presentation is unified by casting the models in a category-theoretic framework. One aim is to use category theory to provide abstract characterisations of constructions like parallel composition valid throughout a range of different models and to provide formal means for translating between different models. A knowledge of basic category theory is assumed, up to an acquaintance with the notion of adjunction.{$<$}/p{$>$}},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\HW2GY88H\\winskel-nielsen-models-for-concurrency.pdf},
  journal = {DAIMI Report Series},
  number = {463}
}

@article{wolterStrukturUndVerhalten,
  title = {{Struktur und Verhalten \textendash{} Duale System-Aspekte}},
  author = {Wolter, Uwe},
  pages = {33},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\Y3J6B5DD\\Wolter - Struktur und Verhalten – Duale System-Aspekte.pdf},
  language = {de}
}

@book{wongProcessAlgebraicApproachWorkflow2007,
  title = {A {{Process}}-{{Algebraic Approach}} to {{Workflow Specification}} and {{Refinement}}},
  author = {Wong, Peter and Gibbons, Jeremy},
  year = {2007},
  month = mar,
  volume = {4829},
  pages = {65},
  doi = {10.1007/978-3-540-77351-1_5},
  abstract = {This paper describes a process-algebraic approach to specification and refinement of workflow processes. In particular, we model both specification and implementation of workflows as CSP processes. CSP's behavioural models and their respective refinement relations not only enable us to prove correctness properties of an individual workflow process against its behavioural specification but also allows us to design and develop workflow processes compositionally. Moreover, coupled with CSP is an industrial strength automated model checker FDR, which allows behavioural properties of workflow models to be proved automatically. This paper details some CSP models of van der Aalst et al.'s control flow workflow patterns, and illustrates behavioural specification and refinement of workflow systems with a business process scenario.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\9CUSGE6N\\Wong und Gibbons - 2007 - A Process-Algebraic Approach to Workflow Specifica.pdf},
  isbn = {978-3-540-77350-4}
}

@inproceedings{yaoConsistencyCheckingUML2006,
  title = {Consistency {{Checking}} of {{UML Dynamic Models Based}} on {{Petri Net Techniques}}},
  booktitle = {2006 15th {{International Conference}} on {{Computing}}},
  author = {Yao, Shuzhen and Shatz, Sol},
  year = {2006},
  month = nov,
  pages = {289--297},
  publisher = {{IEEE}},
  address = {{Mexico city, Mexico}},
  doi = {10.1109/CIC.2006.32},
  abstract = {To aid the development of high quality software applications, we present an approach for consistency checking of UML dynamic models based on Petri Net techniques. ECPN, an Extended Colored Petri Net, is used to formally describe state transitions of individual objects and interactions among objects, and is therefore capable of verifying the consistency of the models based on Petri Net theory. In this work, we consider UML sequence diagrams and statecharts. The approach begins with a flattening strategy for UML dynamic models and then discusses translation of statecharts with composite states to an ECPN notation. The coverability graph is used to drive the consistency checking process. The paper discusses all phases of the approach and illustrates the concept by an example.},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VTGQVR3I\\Yao og Shatz - 2006 - Consistency Checking of UML Dynamic Models Based o.pdf},
  isbn = {978-0-7695-2708-6},
  language = {en}
}

@article{zhouModelingMethodsDynamic2014,
  title = {Modeling Methods for Dynamic Behaviors of Cyber-Physical System},
  author = {Zhou, X.-S. and Yang, Y.-L. and Yang, G.},
  year = {2014},
  volume = {37},
  pages = {1411--1423},
  doi = {10.3724/SP.J.1016.2014.01411},
  document_type = {Article},
  journal = {Jisuanji Xuebao/Chinese Journal of Computers},
  number = {6},
  source = {Scopus}
}

@inproceedings{zschalerAddingHenshinEngineGEMOC2018,
  title = {Adding a {{HenshinEngine}} to {{GEMOC}} Studio: {{An}} Experience Report},
  booktitle = {{{MODELS}} Workshops},
  author = {Zschaler, S.},
  year = {2018},
  file = {C\:\\Users\\Tim\\Zotero\\storage\\VCT5I5PT\\Zschaler - Adding a HenshinEngine to GEMOC Studio.pdf}
}


